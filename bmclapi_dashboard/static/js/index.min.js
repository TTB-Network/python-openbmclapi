class I18NManager {
    constructor() {
        this.lang = "zh_cn"
        this.locales = {
        }
        this.elements = []
    }
    setLang(lang) {
        if (this.lang != lang) {
            this.lang = lang
            window.dispatchEvent(new CustomEvent("lang", { detail: { lang: lang } }))
            this.elements.forEach(e => e.updatei18n())
        }
    }
    addLang(lang, key, value) {
        if (!(lang in this.locales)) this.locales[lang] = {}
        this.locales[lang][key] = value
        return this
    }
    addLangs(lang, tables) {
        for (const key in tables) {
            this.addLang(lang, key, tables[key])
        }
        return this
    }
    t(key, params) {
        if (!(this.lang in this.locales) || !(key in this.locales[this.lang])) return key
        var t = this.locales[this.lang][key]
        for (const k in params) {
            t = t.replaceAll(`%${k}%`, params[k])
        }
        return t
    }
}
class Style {
    constructor() {
        this.themes = {
            light: {
                "color": "#000000",
                "dark-color": "#FFFFFF",
                "background": "#F5F6F8",
                "selection-background": "#fff",
                "main-color": "#0FC6C2",
                "main-shadow": "rgba(15, 198, 194, 0.2)",
                "hover-color": "#0A8A87",
                "shadow": "rgba(145, 158, 171, 0.2)",
                "title-color": "rgba(0, 0, 0, 0.5)",
                "value-color": "rgba(0, 0, 0, 0.7)",
                "button-color": "rgba(0, 0, 0, 0.7)",
                "echarts-main-line-color": "#0FC6C2",
                "echarts-main-color": "#0FC6C2",
                "echarts-dark-color": "#4260f0",
                "echarts-none-color": "#eefbfb",
                "echarts-area-color": "#F7F8FA",
                "echarts-border-color": "#CCC",
                "echarts-emphasis-color": "#ADD8E6",
                "border-color": "rgb(227, 232, 239)",
                "border-background": "rgb(247, 248, 250);",
                "echarts-color-0": "#0FC6C2",
                "echarts-color-1": "#6199FE",
                "echarts-color-2": "#FFD268",
                "echarts-color-3": "#FF5576",
                "echarts-color-4": "#89DFE2"
            },
            dark: {
                "color": "#FFFFFF",
                "dark-color": "#000000",
                "background": "#181818",
                "main-color": "#F4D1B4",
                "main-shadow": "rgba(235, 187, 151, 0.2)",
                "hover-color": "#F6A37E",
                "selection-background": "#232323",
                "shadow": "none",
                "title-color": "rgba(255, 255, 255, 0.5);",
                "value-color": "rgb(255, 255, 255);",
                "button-color": "rgba(255, 255, 255, 0.7)",
                "echarts-main-line-color": "#0FC6C2",
                "echarts-main-color": "#FF8859",
                "echarts-dark-color": "#4260f0",
                "echarts-none-color": "#F4D1B4",
                "echarts-area-color": "#494949",
                "echarts-border-color": "#CCC",
                "echarts-emphasis-color": "#ADD8E6",
                "border-color": "rgb(57, 57, 57);",
                "border-background": "rgb(51, 51, 51);",
                "echarts-color-0": "#F1D6BF",
                "echarts-color-1": "#FFA552", 
                "echarts-color-2": "#F16575", 
                "echarts-color-3": "#65B8FF", 
                "echarts-color-4": "#FF8859"
            }
        };
        this.documentStyle = document.createElement("style");
        document.head.append(this.documentStyle);
        this.$cur_theme = null
        this.applyTheme("light");
        this.setStyles({
            "h1,h2,h3,h4,h5,h6": "font-family: system-ui",
            "html,body,p,h1,h2,h3,h4,h5,h6": "margin:0;padding:0",
            "*": "color: var(--color)",
            "a": "text-decoration: none",
            ".app-flex": [
                "display: flex",
                "flex-wrap: wrap"
            ],
            ".inline": "display: inline",
            ".flex": "display: flex",
            ".flex-space-between": "justify-content: space-between;",
            ".flex-jend": "justify-content: flex-end;",
            ".flex-aligns-center": "align-items: center",
            ".app-swtich-container": [
                `overflow: hidden;
                display: flex;
                padding: 5px;
                border: 1px solid transparent;
                min-height: 36px;
                height: 36px;
                border-radius: 4px;
                width: auto;
                flex-shrink: 0;`
            ],
            ".app-switch-button": [
                `display: inline-flex;
                -webkit-box-align: center;
                align-items: center;
                -webkit-box-pack: center;
                justify-content: center;
                box-sizing: border-box;
                -webkit-tap-highlight-color: transparent;
                background-color: transparent;
                outline: 0px;
                border: 0px;
                margin: 0px;
                border-radius: 5px;
                cursor: pointer;
                user-select: none;
                vertical-align: middle;
                appearance: none;
                text-decoration: none;
                font-family: inherit;
                font-weight: 500;
                line-height: 1.25;
                text-transform: uppercase;
                max-width: 360px;
                position: relative;
                flex-shrink: 0;
                overflow: hidden;
                white-space: normal;
                text-align: center;
                flex-direction: column;
                color: var(--button-color);
                padding: 4px 12px;
                min-height: 0px;
                min-width: 0px;
                font-size: 12px;
                transition: background-color 0.3s ease, color 0.3s ease;`
            ],
            ".app-switch-button.selected": [
                `background-color: var(--main-color)`,
                "color: var(--dark-color)"
            ],
            ".app-rank-container": [
                "padding-top: 16px;"
            ],
            ".app-rank-text": [
                "display: flex",
                "justify-content: space-between;"
            ],
            ".app-rank-progressbar": [
                `margin-top: 8px;
                display: -webkit-box;
                background-color: var(--border-color);
                border-radius: 2px;
                height: 4px;`
            ],
            ".app-rank-progressbar-value": [
                `width: 100%;
                background-color: var(--main-color);
                border-radius: 2px;
                height: 4px;`,
                "transition: width 0.3s ease"
            ],
            ".border-box": [
                `display: flex;
                padding-left: 8px;
                padding-right: 8px;
                -webkit-box-align: center;
                align-items: center;
                background-color: rgba(0, 0, 0, 0.05);
                border-radius: 4px;
                margin-left: 16px;`
            ],
            "@font-face": [
                'font-family: Mono',
                "src: url('../static/fonts/Mono.woff2')",
                `font-weight: normal;
                font-style: normal;`
            ]
        })
    }

    applyTheme(themeName = "") {
        const theme = this.themes[themeName] || this.themes[Object.keys(this.themes)[0]];
        const rootStyles = {};
        for (const key in theme) {
            rootStyles[`--${key}`] = theme[key];
        }
        this.$cur_theme = themeName
        this.setStyle(":root", rootStyles);
        window.dispatchEvent(new Event("themeChange"))
    }
    getTheme() {
        return this.$cur_theme;
    }
    getThemeVar(name) {
        const theme = this.themes[this.$cur_theme] || this.themes[Object.keys(this.themes)[0]];
        return theme[name]
    }
    setStyles(tables) {
        Object.entries(tables).forEach(([key, value]) => this.setStyle(key, value))
    }
    setStyle(tag, code) {
        if (Array.isArray(code)) code = code.join(";")
        if (typeof code === 'object') code = Object.entries(code).map(([key, value]) => `${key}: ${value}`).join(';');
        const styleRule = `${tag} { ${code} }`;
        const styleSheet = this.documentStyle.sheet;
        if (styleSheet) {
            try {
                styleSheet.insertRule(styleRule, styleSheet.cssRules.length);
            } catch (e) {
                this.documentStyle.appendChild(document.createTextNode(styleRule));
            }
        } else {
            this.documentStyle.appendChild(document.createTextNode(styleRule));
        }
    }
}
class Task {
    constructor(func, delay, interval = null, ...args) {
        this.func = func
        this.args = args
        this.delay = delay
        this.interval = interval
        this._task = setTimeout(() => this._run(), delay)
    }
    _run() {
        try {
            this.func(...this.args)
        } catch (error) {
            console.error(...error)
        }
        if (this.interval != null) {
            this._task = setTimeout(() => this._run(), this.interval)
        }
    }
    block() {
        if (this._task != null) clearTimeout(this._task)
        this._task = null
    }
}
class Element {
    constructor(tag, isElement = false) {
        this.base = isElement ? tag : document.createElement(tag)
        this._resize_handler = []
        this._setText = null
        this._childrens = []
        this.i18n = null
        this.i18n_params = {}
        $I18N.elements.push(this)
        //resize_elements.push((...event) => this._resize(...event))
    }
    setHTML(content) {
        this.base.innerHTML = content;
        return this
    }
    setText(content) {
        this.base.innerText = content;
        return this
    }
    setI18N(key, params) {
        this.i18n = key
        this.t18n(params)
        this.updatei18n()
        return this
    }
    t18n(params) {
        this.i18n_params = params
        this.updatei18n()
        return this
    }
    updatei18n() {
        if (!this.i18n) return
        this.setText($I18N.t(this.i18n, this.i18n_params))
    }
    setValue(content) {
        this.base.value = content
        return this
    }
    title(content) {
        return this.setText(content)
    }
    html(content) {
        return this.setHTML(content)
    }
    append(...elements) {
        for (const element of elements) {
            if (element instanceof Element) {
                this._childrens.push(element)
                this.base.append(element.valueOf())
            } else {
                this._childrens.push(new Element(this.isDOM(element) ? element : (new DOMParser()).parseFromString(element, 'text/html'), true))
            }
        }
        return this
    }
    id(name) {
        this.base.id = name
        return this
    }
    class(...classes) {
        for (const clazz of classes) {
            for (const cls of clazz.split(" ")) this.base.classList.add(cls)
        }
        return this
    }
    toggle(clazz) {
        this.base.classList.toggle(clazz)
        return this;
    }
    removeClass(...classes) {
        for (const clazz of classes) {
            for (const cls of clazz.split(" ")) this.base.classList.remove(cls)
        }
        return this
    }
    style(style) {
        this.base.style = style
        return this;
    }
    _resize(...event) {
        for (const func of this._resize_handler) {
            try {
                func(...event)
            } catch (e) {
                console.log(e, func)
            }
        }
    }
    setStyle(key, value) {
        this.base.style[key] = value
        return this;
    }
    valueOf() {
        return this.base
    }
    containsClass(...classes) {
        for (const clazz of classes) {
            for (const cls of clazz.split(" ")) if (this.base.classList.contains(cls)) return true
        }
        return false
    }
    setAttribute(key, value) {
        this.base.setAttribute(key, value)
        return this
    }
    isDOM(value) {
        return value instanceof HTMLElement ||
            Object.prototype.toString.call(value) === '[object HTMLUnknownElement]' ||
            (value && typeof value === 'object' && value.nodeType === 1 && typeof value.nodeName === 'string');
    };
    clear() {
        while (this.base.firstChild != null) this.base.removeChild(this.base.firstChild)
        return this
    }
    event(name, func) {
        if (name == "resize") {
            this._resize_handler.push(func)
            return this
        }
        this.base.addEventListener(name, func)
        return this
    }
    getChildren() {
        return this._childrens
    }
}
class Router {
    constructor(prefix = "") {
        this._prefix = prefix;
        this._cur = window.location.pathname.slice(this._prefix.length)
    }
    route(page) {
        this._cur = page
        window.dispatchEvent(new Event("popstate"));
        history.pushState({ page: page }, "", this._prefix + page);
    }
    handler() {
        app.$Menu.select(this._cur.slice(1).replaceAll("/", "."))
    }
}
class Application {
    constructor() {
        this.$Router = new Router("/pages");
        this.$Style = new Style();
        this.$content = this.createElement("div").class("main-container")
        this.$styles = {
            "*": [
                "box-sizing: border-box;magin:0;padding:0"
            ],
            "::-webkit-scrollbar, html ::-webkit-scrollbar": "width: 5px;height: 5px;border-radius: 10px",
            "::-webkit-scrollbar-thumb, html ::-webkit-scrollbar-thumb": "box-shadow: inset 0 0 6px #0000;background-color: #666;border-radius: 10px",
            "header button": [
                "border: none",
                "background: none",
                "width:  48px",
                "height: 48px",
                "border-radius: 99px",
                "transition: 300ms",
                "font-size: 24px",
                "font-weight: bolder",
                "cursor: pointer"
            ],
            "header button:hover": [
                "background: var(--main-color)",
            ],
            "header button:hover *": [
                "color: var(--dark-color)"
            ],
            "header button:active": [
                "background: var(--hover-color)",
                "color: var(--hover-color)"
            ],
            "header": [
                "background-color: var(--background)",
                "text-align: center",
                "min-height: 56px",
                "width: 100%",
                "padding: 8px",
                "display: flex",
                "position: fixed",
                "flex-wrap: nowrap",
                "align-items: center", "justify-content: space-between",
                "z-index: 1",
            ],
            "body": [
                "background: var(--background)",
                "background-size: cover",
                "width: 100vw",
                "height: 100vh",
            ],
            ".main": "position: relative; top: 56px; display: flex; min-height: calc(100vh - 56px)",
            ".side": [
                "position: fixed",
                "min-width: 240px",
                "padding: 20px",
                "height: 100%",
                "box-shadow: var(--shadow) 0px 4px 10px",
                "opacity: 1",
                "transition: min-width 250ms linear 0s, width 250ms linear 0s, padding 250ms linear 0s, box-shadow 250ms linear 0s, opacity 250ms linear 0s",
                "background: var(--background)",
            ],
            ".side.hidden": [
                "min-width: 0",
                "width: 0",
                "padding: 0",
                "opacity: 0",
                "box-shadow: none",
            ],
            ".main-container": [
                "min-width: calc(100% - 240px)",
                "width: 100%",
                "padding: 20px",
                "margin-left: 240px",
                "transition: width 250ms linear 0s, padding 250ms linear 0s",
            ],
            ".side.hidden ~ .main-container": [
                "min-width: 100%",
                "width: 100%",
                "padding: 20px",
                "margin-left: 0px",
                "transition: width 250ms linear 0s, padding 250ms linear 0s",
            ],
            "header .content": [
                "display: flex",
                "align-items: center"
            ],
            "header .content h3": [
                "border-left: 1px solid var(--shadow)",
                "padding: 8px"
            ],
            "header .content i": [
                "padding: 8px",
                "cursor: pointer",
            ],
            "header i.bx": [
                "text-align: center",
                "font-size: 32px",
            ],
            ".main-container .panel": [
                `background: var(--selection-background);
                color: rgb(0, 0, 0);
                transition: box-shadow 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
                border-radius: 4px;
                background-image: none;
                padding: 24px;
                box-shadow: var(--shawdow) 0px 4px 10px;
                margin: 16px;`,
            ],
            ".main-container .panel.nopadding": [
                "padding: 0;"
            ],
            ".main-container .panel .title": [
                `display: flex;
                margin: 0px 0px 6px;
                font-family: inherit;
                font-weight: 400;
                line-height: 1.5;
                color: var(--title-color);
                font-size: 14px;`
            ],
            ".main-container .panel .value": [
                `margin: 0px;
                font-family: inherit;
                font-weight: 400;
                line-height: 1.5;
                color: var(--value-color);
                font-size: 24px;`
            ],
            ".title-color": "color: var(--title-color)",
            ".rank-circle": `width: 10px; height: 10px; min-width: 10px; min-height: 10px; border-radius: 50%; margin-right: 8px`,
            '.qps-time': '-webkit-animation:re-spin 1s cubic-bezier(0.4, 0, 0.2, 1) infinite;animation:re-spin 1s cubic-bezier(0.4, 0, 0.2, 1) infinite',
            ".border-background": `
            padding-right: 24px;
            border-radius: 4px;
            background-color: var(--border-background);
            padding-left: 24px;
            padding-bottom: 16px;`
        }
        this.$side = this.createElement("aside").class("side")
        this.$container = this.createElement("div").class("main").append(
            this.$side,
            this.$content
        )
        let theme = (new Boolean(parseInt(getCookie("theme")))).valueOf()
        console.log(theme)
        if (!theme) {
            theme = "moon"
            this.$Style.applyTheme("light")
        } else {
            theme = "sun"
            this.$Style.applyTheme("dark")
        }
        this.$theme = this.createElement("i").class("bx", `bxs-${theme}`).style("font-size: 32px").event("click", () => {
            if (this.$theme.containsClass("bxs-moon")) {
                this.$theme.removeClass("bxs-moon")
                this.$theme.class("bxs-sun")
                this.$Style.applyTheme("dark")
            } else {
                this.$theme.class("bxs-moon")
                this.$theme.removeClass("bxs-sun")
                this.$Style.applyTheme("light")
            }
            document.cookie = `theme=${this.$theme.containsClass("bxs-sun") ? "1" : "0"}; path=/`
        })
        this.menuButton = this.createElement("i").class("bx bx-menu").style("font-size: 32px").event("click", () => {
            this.$side.toggle("hidden")
            setTimeout(() => {
                window.dispatchEvent(new Event("resize"))
            }, 500)
        })
        this.$header = this.createElement("header").append(
            this.createElement("div").class("content").append(
                this.menuButton,
                this.$theme,
                this.createElement("h3").append(
                    this.createElement("a").setAttribute("href", $github).setText(document.title)
                )
            ),
            this.createElement("div").class("content").append(
                this.createElement("button").append(
                    this.createElement("i").class("bx", "bx-world")
                ),
                this.createElement("button").append(
                    this.createElement("i").class("bx", "bx-user-circle")
                ).event("click", () => {
                    modal.open().body(app.createElement("a").setText("cnm"),app.createElement("a").setText("cnm"))
                })
            )
        )
        document.body.prepend(
            this.$header.valueOf(),
            this.$container.valueOf(),
        )
        this.$Style.setStyles(this.$styles)
        this.$Menu = new Menu(this, this.$side);
        this.$flexes = []
        if (window.outerWidth <= window.outerHeight * 1.75) this.menuButton.valueOf().click()
        window.addEventListener("resize", () => {
            for (const flex of this.$flexes) {
                flex.update(false)
            }
        })
    }
    runTaskLater(handler, delay, ...args) {
        return new Task(handler, delay, null, ...args)
    }
    runTaskRepeat(handler, delay, interval, ...args) {
        return new Task(handler, delay, interval, ...args)
    }
    addFlex(element) {
        this.$flexes.push(element)
    }
    resizeFlex(cur) {
        for (const flex of this.$flexes) {
            if (cur.base == flex.base) continue
            flex.update(false)
        }
    }
    createFlex(noUpdateOther = false) {
        return new ElementFlex("div", false, noUpdateOther)
    }
    createEcharts() {
        return new TemplateEchart()
    }
    createElement(tag) {
        return new Element(tag);
    }
    setStyles(tables) {
        this.$Style.setStyles(tables)
    }
    getThemeVar(name) {
        return this.$Style.getThemeVar(name)
    }
}
class Preloader {
    constructor() {
        this.$page = app.createElement("div").class("preloader")
        this.$page.append(
            app.createElement("div").class("load")
        )
        this.$styles = {
            ".preloader": `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1003;
            background: #000000;
            overflow: hidden;
            opacity: 1;
            transition: opacity 500ms linear 0s`,
            ".preloader.hidden": "opacity: 0",
            ".preloader .load": `display: block;
            position: relative;
            left: 50%;
            top: 50%;
            width: 150px;
            height: 150px;
            margin: -75px 0 0 -75px;
            border-radius: 50%;
            box-shadow: 0 8px 8px 0 #0FC6C2;
            transform: translate3d(0,0,0);
            animation: spin 2s linear infinite;`,
        }
        app.$Style.setStyles(this.$styles)
        document.body.prepend(this.$page.valueOf());
        (new Array(...document.body.children)).forEach(e => {
            if (e == this.$page.valueOf()) return
            e.style.display = "none"
        })
        window.addEventListener("load", () => {
            this.$page.class("hidden");
            setTimeout(() => {
                document.body.removeChild(this.$page.valueOf());
            }, 500);
            (new Array(...document.body.children)).forEach(e => {
                if (e == this.$page.valueOf()) return
                e.style.display = ""
            })
        })
    }
}
class Menu {
    constructor(app, side) {
        this.$app = app
        this.$Router = app.$Router
        this.$menus = {}
        this.$base = app.createElement("div").class("list")
        this.$styles = {
            ".side .menu": [
                `outline: 0px;
                border: 0px;
                margin: 0px 0px 4px;
                cursor: pointer;
                user-select: none;
                vertical-align: middle;
                appearance: none;
                color: inherit;
                display: flex;
                -webkit-box-flex: 1;
                -webkit-box-pack: start;
                justify-content: space-between;
                -webkit-box-align: center;
                align-items: center;
                position: relative;
                text-decoration: none;
                min-width: 0px;
                box-sizing: border-box;
                text-align: left;
                padding: 8px 16px;
                transition: background-color 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
                height: 46px;
                border-radius: 4px;`
            ],
            ".side .menu:hover": [
                "background-color: transparent;",
                "color: var(--main-color)"
            ],
            ".side .menu.selected": [
                "background: var(--main-color)",
                "box-shadow: var(--main-shadow) 0px 10px 25px 0px",
            ],
            ".side .menu.selected span": [
                "color: var(--dark-color)",
            ],
            ".side .menu .icon": [
                "padding-right: 4px"
            ],
            ".side i": [
                "font-size: 22px",
                "font-weight: 100"
            ],
            ".side .menu.selected i": [
                "color: var(--dark-color)",
            ],
            ".side .menu.selected i.bx-chevron-right": 'transform: rotate(90deg);',
            ".side .submenu": [
                `-webkit-tap-highlight-color: transparent;
                background-color: transparent;
                outline: 0px;
                border: 0px;
                margin: 0px 0px 4px;
                cursor: pointer;
                user-select: none;
                vertical-align: middle;
                appearance: none;
                color: inherit;
                display: flex;
                -webkit-box-flex: 1;
                flex-grow: 1;
                -webkit-box-pack: start;
                justify-content: flex-start;
                -webkit-box-align: center;
                align-items: center;
                position: relative;
                text-decoration: none;
                min-width: 0px;
                box-sizing: border-box;
                text-align: left;
                padding: 8px 16px;
                transition: background-color 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
                height: 40px;
                border-radius: 4px;`
            ],
            ".side .submenus": [
                "display: none"
            ],
            ".side .submenus.show": [
                "display: block"
            ],
            ".side .submenu .cycle span": [
                `width: 4px;
                height: 4px;
                background-color: rgba(0, 0, 0, 0.7);
                border-radius: 50%;`
            ],
            ".side .submenu.selected .cycle span": [
                "background: var(--main-color)",
                "width: 8px",
                "height: 8px"
            ],
            ".side .submenu.selected .text": [
                "font-weight: 700;"
            ],
            ".side .submenu .cycle": [
                `margin-left: 4px;
                width: 10px;
                display: flex;
                -webkit-box-pack: center;
                justify-content: center`
            ],
            ".side .submenu .text": [
                `flex: 1 1 auto;
                min-width: 0px;
                margin-top: 4px;
                margin-bottom: 4px;
                margin-left: 16px;
                color: rgba(0, 0, 0, 0.7);`
            ],
            ".side .list": [
                "overflow: auto"
            ]
        }
        side.append(this.$base)
        this.$index = {}
        this.$last_key = null
        this.$app.setStyles(this.$styles)
    }
    add(key, core, icon) {
        let sub;
        [key, sub] = this.get_key(key)
        if (!(key in this.$menus)) this.$menus[key] = { core, children: [], icon }
        if (sub != null) this.$menus[key].children.push({ key: sub, core })
        else this.$menus[key].core = core
    }
    setIcon(key, icon) {
        let sub;
        [key, sub] = this.get_key(key)
        if (sub != null && key in this.$menus) {
            this.$menus[key].children = this.$menus[key].children.forEach(v => () => {
                if (v.key == sub) v.icon = icon
            })
        }
        if (sub == null && key in this.$menus) this.$menus[key].icon = icon
    }
    remove(key) {
        let sub;
        [key, sub] = this.get_key(key)
        if (sub != null && key in this.$menus) {
            this.$menus[key].children = this.$menus[key].children.filter(v => v.key != sub)
        }
        if (sub == null && key in this.$menus) delete this.$menus[key]
    }
    render() {
        this.$base.clear()
        for (const key in this.$menus) {
            const object = this.$menus[key]
            const div = app.createElement("div").class("menu")
            div.append(app.createElement("div").class("flex").append(app.createElement("div").class("icon").setHTML(object.icon || ""), app.createElement("span").setI18N("menu." + key))).event("click", () => {
                let page = key
                if (object.children.length != 0) {
                    page += "/" + object.children[0].key
                }
                this.$Router.route("/" + page)
                this.$Router.handler()
            })
            this.$index[key] = { div }
            if (object.children.length != 0) {
                div.append(app.createElement("i").class("bx bx-chevron-right"))
            }
            this.$base.append(div)
            if (object.children.length != 0) {
                const sub = app.createElement("div").class("submenus")
                const subIndex = {}
                for (const subObject of object.children) {
                    const subdiv = app.createElement("div").class("submenu")
                    subdiv.append(app.createElement("div").class("cycle").append(app.createElement("span")), app.createElement("div").class("text").append(app.createElement("span").setI18N("menu." + key + "." + subObject.key))).event("click", () => {
                        let page = key + "/" + subObject.key
                        this.$Router.route("/" + page)
                        this.$Router.handler()
                    })
                    sub.append(subdiv)
                    subIndex[subObject.key] = subdiv
                }
                this.$index[key].sub = { main: sub, index: subIndex }
                this.$base.append(sub)
            }
        }
    }
    getFirst() {
        const key = Object.keys(this.$menus)[0]
        let rkey = key
        if (this.$menus[key].children.length != 0) {
            rkey += "/" + this.$menus[key].children[0].key
        }
        return rkey
    }
    select(raw_key) {
        if (!raw_key) raw_key = this.getFirst()
        let sub, key;
        [key, sub] = this.get_key(raw_key)
        for (const div in this.$index) {
            this.$index[div].div.removeClass("selected")
            if (this.$index[div].sub != null) {
                this.$index[div].sub.main.removeClass("show")
                for (const sub in this.$index[div].sub.index) {
                    this.$index[div].sub.index[sub].removeClass("selected")
                }
            }
        }
        if (!(key in this.$index)) return
        this.$index[key].div.class("selected")
        if (sub != null) {
            this.$index[key].sub.main.class("show")
            this.$index[key].sub.index[sub].class("selected")
        }
        if (raw_key == this.$last_key) return
        this.page(raw_key)
        this.$last_key = raw_key
    }
    get_key(key) {
        let sub = null;
        [key, sub] = key.split(".", 2)
        return [key, sub]
    }
    page(raw_key) {
        let sub, key;
        while (document.getElementsByClassName("main-container")[0].firstChild != null) document.getElementsByClassName("main-container")[0].removeChild(document.getElementsByClassName("main-container")[0].firstChild)
        if (this.$last_key != null) {
            [key, sub] = this.get_key(this.$last_key)
            if (sub != null) {
                this.$menus[key].children.forEach(e => {
                    if (e.key == sub) {
                        if (e.core != null && ("disconnect" in e.core)) {
                            try {
                                e.core.disconnect()
                            } catch (e) {
                                console.log(e)
                            }
                        }
                    }
                })
            } else {
                if (this.$menus[key].core != null && ("disconnect" in this.$menus[key].core)) {
                    try {
                        this.$menus[key].core.disconnect()
                    } catch (e) {
                        console.log(e)
                    }
                }
            }
        }
        var r = null;
        $progress.set(50);
        [key, sub] = this.get_key(raw_key)
        if (sub != null) {
            this.$menus[key].children.forEach(e => {
                if (e.key == sub) {
                    if (e.core != null && ("connect" in e.core)) {
                        try {
                            r = e.core.connect()
                        } catch (e) {
                            console.log(e)
                        }
                    }
                }
            })
        } else {
            if (this.$menus[key].core != null && ("connect" in this.$menus[key].core)) {
                try {
                    r = this.$menus[key].core.connect()
                } catch (e) {
                    console.log(e)
                }
            }
        }
        if (r != null) {
            if (!(r instanceof Promise)) r = new Promise((resolve, reject) => {
                resolve(r);
            })
            r.then((page) => {
                $progress.set(100);
                if (!Array.isArray(page)) page = [page]
                document.getElementsByClassName("main-container")[0].append(...page.map(e => e instanceof Element ? e.valueOf() : e))
            }).catch((page) => {
                $progress.set(100);
            })
        }
    }
    resize() {
        if (this.$last_key != null) {
            var [key, sub] = this.get_key(this.$last_key)
            if (sub != null) {
                this.$menus[key].children.forEach(e => {
                    if (e.key == sub) {
                        if (e.core != null && ("resize" in e.core)) {
                            try {
                                e.core.resize()
                            } catch (e) {
                                console.log(e)
                            }
                        }
                    }
                })
            } else {
                if (this.$menus[key].core != null && ("resize" in this.$menus[key].core)) {
                    try {
                        this.$menus[key].core.resize()
                    } catch (e) {
                        console.log(e)
                    }
                }
            }
        }
    }
}
class ProgressBar {
    constructor() {
        this.$base = app.createElement("div").class("progressbar");
        this.$cur = 0
        this.$task = 0
        this.$value = 0
        this.$speed = 0.01;
        this.$stop = null
        app.$Style.setStyles({
            ".progressbar": [
                "height: 2px",
                "background-color: var(--main-color)",
                "position: absolute",
                "transition: width 0.5s",
                "z-index: 2"
            ]
        });
        document.body.prepend(this.$base.valueOf())
    }
    set(value, speed = null) {
        if (speed != null) this.$speed = speed
        this.$value = value
        this.start()
    }
    start() {
        if (this.$task) {
            return;
        }
        clearTimeout(this.$stop);
        this.$task = setInterval(() => {
            this.increaseProgress();
        }, (this.$speed * 1000.0));
    }
    increaseProgress() {
        if (this.$cur >= this.$value) {
            this.$cur = this.$value
        }
        if (this.$value < 100 && this.$cur < this.$value) {
            this.$cur += Math.min(
                ((cur, value) => {
                    const threshold = value * 0.05;
                    return value - cur < threshold ? 0.5 : (value - cur) / threshold / 2
                })(this.$cur, this.$value) * Math.sin((this.$cur / this.$value) * 0.5 + 0.5,
                    this.$value - this.$cur
                ));
            this.updateProgress();
        } else {
            this.$cur = 100;
            this.updateProgress();
            this.$stop = setTimeout(() => this.stop(), 500)
        }
    }
    updateProgress() {
        this.$base.style(`width: ${this.$cur}%`)
    }
    stop() {
        if (this.$task) {
            clearInterval(this.$task);
            this.$task = null;
            this.$base.style(`width: 0%`)
            this.$speed = 0.1;
        }
    }
    changeSpeed(newSpeed) {
        this.$speed = newSpeed;
        if (this.$task) {
            this.stop();
            this.start();
        }
    }
}
class WebSocketClient {
    constructor(url, handlers = {}) {
        this.url = url;
        this.ws = null;
        this.reconnectInterval = 1000;  // 重连间隔为1秒
        this.retryMessage = !(handlers.retryMessage || true)
        this.messageQueue = [];  // 用于缓存消息的队列
        this.handlers = handlers;  // 处理函数的对象
        this.stats = {
            sent: { count: 0, length: 0 },
            received: { count: 0, length: 0 }
        };
        this.connect()
        this.reconnectTask = null;
    }

    close() {
        this.ws.close();
    }

    connect() {
        this.ws = new WebSocket(this.url);

        // 当连接打开时，发送所有缓存的消息，并调用处理函数
        this.ws.onopen = () => {
            if (this.reconnectTask !== null) {
                clearInterval(this.reconnectTask)
                this.reconnectTask = null
            }
            while (this.messageQueue.length > 0) {
                let message = this.messageQueue.shift();
                this.send(message)
            }
            if (this.handlers.onopen) {
                this.handlers.onopen();
            }
        };

        // 当接收到消息时，调用处理函数
        this.ws.onmessage = (event) => {
            this.stats.received.count++;
            this.stats.received.length += event.data.length;
            if (this.handlers.onmessage) {
                this.handlers.onmessage(event);
            }
        };

        // 当连接关闭时，尝试重新连接，并调用处理函数
        this.ws.onclose = () => {
            this.ws = null
            if (this.handlers.onclose) {
                this.handlers.onclose();
            }
            this.reconnectTask = setTimeout(() => this.connect(), this.reconnectInterval)
        };
    }

    send(data) {
        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            this.stats.sent.count++;
            this.stats.sent.length += this.calculateBytes(data);
            this.ws.send(data instanceof BytesBuffer ? data.toBytes() : data);
        } else {
            if (!this.ws || this.ws.readyState === WebSocket.CLOSED) {
                this.connect();
            }
            if (this.retryMessage)
                this.messageQueue.push(data);
        }
    }
    calculateBytes(data) {
        let bytes;
        if (typeof data === "string") bytes = (new TextEncoder()).encode(data).byteLength
        else if (data instanceof ArrayBuffer || data instanceof DataView || data instanceof Uint8Array) bytes = data.byteLength;
        else if (data instanceof Blob) bytes = data.size
        else if (data instanceof BytesBuffer) bytes = data.len()
        else bytes = (new TextEncoder()).encode(String(data)).byteLength
        return bytes;
    }
    getStats() {
        return this.stats;
    }
}
class MinecraftUtils {
    static getVarInt(data) {
        let r = [];
        while (true) {
            if ((data & 0xFFFFFF80) === 0) {
                r.push(data);
                break;
            }
            r.push(data & 0x7F | 0x80);
            data >>= 7;
        }
        return r;
    }
    static getVarIntLength(data) {
        return this.getVarInt(data).length;
    }
}
class BytesBuffer {
    constructor(...data) {
        this.buffer = []
        this.cur = 0
        this.write(...data)
    }
    write(...values) {
        for (const value of values) {
            if (value instanceof BytesBuffer) {
                this.buffer.push(...value.buffer)
            } else if (Number.isInteger(value)) {
                this.buffer.push(value < 0 ? value + 256 : value)
            } else if (Array.isArray(value) && value.filter(v => Number.isInteger(v)).length == value.length) {
                value.forEach(v => this.write(v))
            } else if (value instanceof Uint8Array) {
                for (let i = 0; i < value.byteLength; i++) {
                    this.write(value[i])
                }
            } else if (value instanceof ArrayBuffer) {
                this.write(new Uint8Array(value))
            } else if (!value === undefined) {
                console.log(typeof value, "buf", value)
            }
        }
    }
    read(length = 1) {
        let data = []
        for (let i = 0; i < length; i++) data.push(...this.buffer.slice(this.cur + i, this.cur + i + 1))
        this.cur += length
        return data;
    }
    tell() {
        return this.cur
    }
    readBytes(length) {
        return this.read(length);
    }
    sizeof() {
        return this.buffer.length;
    }
    len() {
        return this.buffer.length;
    }
    toBytes() {
        return new Uint8Array(this.buffer)
    }
    copy() {
        let buf = []
        this.buffer.forEach(v => buf.push(v))
        return buf
    }
}
class DataOutputStream extends BytesBuffer {
    constructor(data) {
        super()
        this.write(data)
    }
    writeInteger(value) {
        this.write((value >> 24) & 0xFF, (value >> 16) & 0xFF, (value >> 8) & 0xFF, (value >> 0) & 0xFF);
    }
    writeBoolean(value) {
        this.write(value ? 1 : 0)
    }
    writeFloat(value) {
        const bytes = new Uint8Array((new Float32Array([value])).buffer);
        for (let i = 0; i < 4; i++) {
            this.write(bytes[i]);
        }
    }
    writeDouble(value) {
        const bytes = new Uint8Array((new Float64Array([value])).buffer);
        for (let i = 0; i < 8; i++) {
            this.write(bytes[i]);
        }
    }
    writeVarInt(value) {
        this.write(MinecraftUtils.getVarInt(value));
        return this;
    }
    writeString(data, encoding = 'utf-8') {
        this.writeVarInt(data.length);
        this.write(new TextEncoder(encoding).encode(data));
        return this;
    }
    writeLong(data) {
        data = data - (data > Math.pow(2, 63) - 1 ? Math.pow(2, 64) : data);
        this.write((data >> 56) & 0xFF, (data >> 48) & 0xFF, (data >> 40) & 0xFF, (data >> 32) & 0xFF, (data >> 24) & 0xFF, (data >> 16) & 0xFF, (data >> 8) & 0xFF, (data >> 0) & 0xFF);
        return this;
    }
    writeUUID(uuid) {
        this.writeLong(uuid.int >> 64);
        this.writeLong(uuid.int & ((1 << 64) - 1));
        return this;
    }
}
class DataInputStream extends BytesBuffer {
    readInteger() {
        let value = this.read(4)
        return ((value[0] << 24) + (value[1] << 16) + (value[2] << 8) + (value[3] << 0))
    }
    readBoolean() {
        return Boolean(this.read(1)[0]);
    }
    readShort() {
        value = this.read(2);
        if (value[0] | value[1] < 0)
            throw EOFError()
        return ((value[0] << 8) + (value[1] << 0))
    }
    readLong() {
        let value = this.read(8)
        value = (
            (value[0] << 56) +
            ((value[1] & 255) << 48) +
            ((value[2] & 255) << 40) +
            ((value[3] & 255) << 32) +
            ((value[4] & 255) << 24) +
            ((value[5] & 255) << 16) +
            ((value[6] & 255) << 8) +
            ((value[7] & 255) << 0))
        return value < BigInt(Math.pow(2, 63) - 1) ? value : value - BigInt(Math.pow(2, 64));
    }
    readDouble() {
        return (new DataView(new Uint8Array(this.readBytes(4)))).getFloat64()
    }
    readFloat() {
        return (new DataView(new Uint8Array(this.readBytes(4)))).getFloat32()
    }
    readVarInt() {
        let i = 0;
        let j = 0;
        let k;
        while (true) {
            k = this.read(1)[0];
            i |= (k & 0x7F) << j * 7;
            j += 1;
            if ((k & 0x80) !== 128) break;
        }
        return i >= 2 ** 31 - 1 ? i - 2 ** 31 * 2 : i;
    }
    readString(maximum = null, encoding = 'utf-8') {
        return new TextDecoder(encoding).decode(new Uint8Array(this.read(maximum == null ? this.readVarInt() : maximum)));
    }
    readBytes(length) {
        return this.read(length);
    }
    readUUID() {
        let m = this.readLong();
        let l = this.readLong();
        return new UUID(m.toBytes().concat(l.toBytes()));
    }
}
class SocketData {
    constructor() {
        this.$url = window.location.protocol + "//" + window.location.host + window.location.pathname
        this.$support = __CONFIG__.websocket
        if (this.$support) {
            this.$cache = []
            this.$opened = false
            this.create_ws()
        }
        this.$data = {}
        this.$key = 1;
    }
    send_http(namespace, data) {
        return new Promise((resolve, reject) => {
            var key = this.$key++
            this.$data[key] = { resolve, reject }
            setTimeout(() => {
                if (key in this.$data) reject(new Error("Timeout."))
                delete this.$data[key]
            }, 30000)
            const xhr = new XMLHttpRequest()
            xhr.onload = async (event) => {
                if (event.target.readyState == 4) {
                    var header = event.target.getResponseHeader("X-Encoding") 
                    if (header == "binary") {
                        await this.read_blob(new Blob([event.target.response], { type: "application/octet-stream" })).then((data) => {
                            this.recv(data.readVarInt(), data.readString(), this._deserializeData(data))
                        })
                    } else {
                        this.recv(key, namespace, JSON.parse(event.target.response).data)
                    }
                }
            }
            xhr.open("POST", `${this.$url}?key=${key}&namespace=${encodeURIComponent(namespace)}`, true)
            xhr.setRequestHeader("Content-Type", "application/json")
            xhr.setRequestHeader("X-Accept-Encoding", "json")
            xhr.send(window.btoa(data))
        })
    }
    create_ws() {
        if (!this.$support) throw "Unable to send websocket data."
        if (this.$ws == null) this.$ws = new WebSocketClient("ws" + (this.$url.slice(4)), {
            "onmessage": (msg) => {
                this.read_blob(msg.data).then((data) => {
                    this.recv(data.readVarInt(), data.readString(), this._deserializeData(data))
                })
            },
            "onopen": () => {
                this.$opened = true
                this.$cache.forEach(e => this.$ws.send(e))
                this.$cache = []
                window.dispatchEvent(new Event("mainsocket_connect"))
            },
            "onclose": () => {
                this.$opened = false
                window.dispatchEvent(new Event("mainsocket_disconnect"))
            }
        })
    }
    read_blob(blob) {
        return new Promise((resolve, reject) => {
            let reader = new FileReader();
            reader.onload = () => {
                let arrayBuffer = reader.result;
                resolve(new DataInputStream(arrayBuffer))
            }
            reader.readAsArrayBuffer(blob)
        })
    }
    send_ws(namespace, data) {
        this.create_ws()
        return new Promise((resolve, reject) => {
            var key = this.$key++
            const buffer = new DataOutputStream()
            buffer.writeVarInt(key)
            buffer.writeString(namespace)
            buffer.write(this._serializeData(data))
            if (!this.$opened) this.$cache.push(buffer)
            else this.$ws.send(buffer)
            this.$data[key] = { resolve, reject }
            setTimeout(() => {
                if (key in this.$data) reject(new Error("Timeout."))
                delete this.$data[key]
            }, 30000)
        })
    }
    send(namespace, data, forceHttp = false) {
        if (this.$support && !forceHttp) {
            return this.send_ws(namespace, data)
        } else {
            return this.send_http(namespace, data)
        }
    }
    recv(key, namespace, data) {
        if (key in this.$data) {
            this.$data[key].resolve(data)
            delete this.$data[key]
        }
        if (key == 0) window.dispatchEvent(new CustomEvent("mainsocket_" + namespace, { detail: data }))
        console.log(namespace, data)
    }
    _deserializeData(input) {
        const type = input.readVarInt()
        switch (type) {
            case 0: // string
                return input.readString()
            case 1: // bool
                return input.readBoolean()
            case 2: // float
                return parseFloat(input.readString())
            case 3: // bool
                return parseInt(input.readString())
            case 4: {// list
                const length = input.readVarInt()
                const data = []
                for (let _ = 0; _ < length; _++) data.push(this._deserializeData(input))
                return data
            }
            case 5: {// table
                const length = input.readVarInt()
                const data = {}
                for (let _ = 0; _ < length; _++) {
                    data[this._deserializeData(input)] = this._deserializeData(input)
                }
                return data
            }
            case 6:
                return null
            default:
                console.log(type)
                return null
        }
    }
    _serializeData(data) {
        const buf = new DataOutputStream()
        switch (typeof data) {
            case "string": {
                buf.writeVarInt(0)
                buf.writeString(data)
                break;
            }
            case "boolean": {
                buf.writeVarInt(1)
                buf.writeBoolean(data)
                break;
            }
            case "number": {
                if (Number.isInteger(data)) {
                    buf.writeVarInt(3)
                    buf.writeString(data.toString())
                }
                break;
            }
            case "object": {
                if (Array.isArray(data)) {
                    buf.writeVarInt(4)
                    buf.writeVarInt(data.length)
                    for (v of data) {
                        buf.write(this._serializeData(v))
                    }
                } else if (data != null) {
                    buf.writeVarInt(5);
                    buf.writeVarInt(Object.keys(data).length);
                    for (const key in data) {
                        buf.write(this._serializeData(key));
                        buf.write(this._serializeData(data[key]));
                    }
                } else if (data == null) {
                    buf.writeVarInt(6);
                }
                break;
            }
            case "undefined": {
                buf.writeVarInt(6);
                break;
            }
            default:
                buf.writeVarInt(6);
                console.log(data)
        }
        return buf
    }
    support() {
        return this.$support
    }
}
class ElementFlex extends Element {
    constructor(tag = "div", isElement = false, noUpdateOther = false) {
        super(tag, isElement)
        app.addFlex(this)
        this.class("app-flex")
        this._minwidth = null
        this._minheight = null
        this._maxwidth = null
        this._maxheight = null
        this._updateTimer = null
        this._child = 1
        this._childStyle = ''
        this._tag = null
        this._resizes = []
        this._disable = false
        this._customWidths = []
        this.update(!noUpdateOther)
    }
    disable() {
        this._disable = true
        return this
    }
    addResize(func) {
        this._resizes.push(func)
        return this
    }
    append(...elements) {
        super.append(...elements.map(e => this.isDOM(e) || e instanceof Element ? e : (new Element("div")).setHTML(e)))
        return this
    }
    tag(tag) {
        this._tag = tag
        return this
    }
    min_width(width) {
        this.minwidth = width
        return this
    }
    max_width(width) {
        this.maxwidth = width
        return this
    }
    min_height(height) {
        this.minheight = height
        return this
    }
    max_height(height) {
        this.maxheight = height
        return this
    }
    height(height) {
        this.setStyle("height", height)
        return this
    }
    width(width) {
        this.setStyle("width", width)
        return this
    }
    style(key, value) {
        app.setStyle(".app-flex." + key + "_" + value, `${key}: ${value}`)
        this.class(key + "_" + value)
        return this
    }
    update(main = true) {
        if (this._disable) {
            for (const func of this._resizes) {
                func()
            }
            return this
        }
        const get_margin = (child) => {
            const child_style = window.getComputedStyle(child.valueOf());
            const margin = (parseInt(child_style.marginRight, 10) + parseInt(child_style.marginLeft, 10));
            return (Number.isNaN(margin) ? 0 : margin)
        }
        const width = (super.valueOf().offsetWidth - 1)
        const childpercents = this._customWidths.reduce((sum, width) => sum + width, 0);
        let minwidth = this._calcValueWithDisplay(this._minwidth || 0, width)
        let maxwidth = this._calcValueWithDisplay(this._maxwidth, width)
        let newwidth = Number.parseInt(clamp(minwidth, width, maxwidth) / 2) * 2
        const children = this.getChildren()
        const widths = Math.max(0, newwidth)
        let percentWidth = 0
        if (newwidth > minwidth)
            for (let i = 0; i < Math.min(this._customWidths.length, children.length); i++) {
                const child = children[i];
                //child.valueOf().style = this._childStyle
                child.setStyle("boxSizing", "border-box")
                child.setStyle("width", (width * (this._customWidths[i] / childpercents) - get_margin(child)) + "px")
                percentWidth += width * (this._customWidths[i] / childpercents) - get_margin(child)
            }
        const width_avg = Math.max(0, Math.floor((widths - percentWidth) / (this._child - (percentWidth != 0 ? this._customWidths.length : 0))))
        for (let i = Math.min((percentWidth != 0 ? this._customWidths.length : 0), children.length); i < children.length; i++) {
            const child = children[i];
            //child.valueOf().style = this._childStyle
            child.setStyle("boxSizing", "border-box")
            child.setStyle("width", (newwidth <= minwidth ? width : width_avg - get_margin(child)) + "px")
        }
        for (const func of this._resizes) {
            func()
        }
        if (!main) return this
        app.resizeFlex(main)
        return this
    }
    _calcValueWithDisplay(value, display) {
        if (value == -1 || value == null) return display
        if (typeof value === 'string' && value.includes('%')) {
            return Math.floor(display * (parseFloat(value.replace('%', '')) / 100));
        } else {
            return value;
        }
    }
    childStyle(value) {
        this._childStyle = value
        return this
    }
    minWidth(value) {
        this._minwidth = value
        return this
    }
    minHeight(value) {
        this._minheight = value
        return this
    }
    maxWidth(value) {
        this._maxwidth = value
        return this
    }
    maxHeight(value) {
        this._maxheight = value
        return this
    }
    child(value) {
        this._child = Math.max(1, Number.parseInt(value.toString()))
        return this
    }
    childWidths(...value) {
        this._customWidths = value
        return this;
    }
}
class ElementSwitch extends Element {
    constructor(...buttons) {
        super("div")
        this.buttons = buttons
        this.instancedbuttons = []
        this.selected = null
        this.class("app-swtich-container")
        this.handlers = []
        for (const bi in this.buttons) {
            this.instancedbuttons.push((new Element("button")).class("app-switch-button").setI18N(this.buttons[bi]).event("click", (event) => {
                this.click(this.instancedbuttons[bi], bi)
            }))
        }
        this.append(...this.instancedbuttons)
        this.click(this.instancedbuttons[0])
    }
    click(target, index) {
        if (index == this.selected) return
        this.selected = index
        this.instancedbuttons.forEach(e => e.removeClass("selected"))
        target.class("selected")
        this.handlers.forEach(e => e(index))
    }
    select(index) {
        this.click(this.instancedbuttons[index], index)
        return this
    }
    event(name, func) {
        if (name == "click") {
            this.handlers.push(func)
        } else {
            super.event(name, func)
        }
        return this
    }
}
class ElementRank extends ElementFlex {
    constructor(option) {
        super("div", false, true)
        this.class("app-rank")
        this.data = null
        this.config = {
            count: null,
            rows: false,
            formatter: null,
            i18n: false
        }
        this.setOption(option)
    }
    setOption(option) {
        this.config = {
            ...option
        }
        this.updateData()
        return this
    }
    setData(data) {
        this.data = data
        this.updateData()
        return this
    }
    updateData() {
        this.clear()
        var data = []
        var isArrayType = true;
        var isObjectType = true;
        var total = 0;
        if (this.data) {
            this.data.forEach(e => {
                if (Array.isArray(e)) {
                    isObjectType = false;
                } else if (typeof e === 'object' && e !== null) {
                    isArrayType = false;
                } else {
                    throw new Error("数据类型不符，数组中只能包含数组或对象");
                }
                if (!isArrayType && !isObjectType) {
                    throw new Error("数据类型不符，数组中不能同时包含数组和对象");
                }
                if (isArrayType) {
                    data.push({
                        name: '',
                        value: e,
                    });
                    total = Math.max(e, total);
                } else {
                    data.push(e);
                    total = Math.max(e.value, total);
                }
            });
        }
        if (this.config.count && data.length > this.config.count) {
            data = data.slice(0, this.config.count);
        } else if (this.config.count && data.length < this.config.count) {
            while (data.length < this.config.count) {
                data.push({
                    name: '-',
                    value: 0
                });
            }
        }
        data.sort((a, b) => b.value - a.value)
        for (const val of data) {
            const div = app.createElement("div").class("app-rank-container")
            const progress = app.createElement("div").class("app-rank-progressbar").append(
                app.createElement("div").class("app-rank-progressbar-value").style(`width: ${total == 0 ? 0 : Math.max(1, (val.value / total) * 100.0)}%`)
            )
            const text = app.createElement("div").class("app-rank-text").append(
                this.config.i18n ? app.createElement("p").class("normal").setI18N(val.name) : app.createElement("p").class("normal").setText(val.name), 
                app.createElement("p").class("normal").setText(val.value)
            )
            div.append(text, progress)
            this.append(div)
        }
        this.update()
        return this
    }
}
class Console extends Element {
    constructor() {
        super("div")
        this.$styles = {
            ".console": [
                "min-height: 648px",
                "height: 79.5vh",
                "width: 100%",
                "overflow: auto",
                "background-color: black",
                "padding: 8px"
            ]
        }
        app.setStyles(this.$styles)
        this.class("console")
        for (let i = 0; i < 1000; i++) {
            this.log(new Date(), "0")
        }
    }
    log(timestamp, ...msg) {
        var messages = []
        var first = true;
        for (msg of [`[${formatTime(timestamp)}]`, ...msg]) {
            if (first) first = false;
            else messages.push(app.createElement("span").setText(" "))
            var span = app.createElement("span")
            if (msg instanceof Element) {
                span.append(msg)
            } else {
                span.setHTML(msg)
            }
            messages.push(span);
        }
        this.append(
            app.createElement("p").append(
                ...messages
            )
        )
    }
}
const EchartType = {
    DATA: 0,
    LABEL: 1
}
class TemplateEchart extends Element {
    constructor() {
        super("div")
        this.instance = echarts.init(this.base)
        this.formatter = this._format_number_unit
        this.type = EchartType.DATA
        this.setOption({
            stateAnimation: {
                duration: 300,
                easing: "cubicOut"
            },
            tooltip: {
                trigger: 'axis',
                formatter: (params) => this._e_templates(params)
            }
        })
    }
    setFormatter(formatter) {
        this.formatter = formatter || this._format_number_unit
        return this
    }
    setOption(option) {
        this.instance.setOption(option)
        if ('tooltip' in option && 'formatter' in option['tooltip']) return this
        this.setOption({
            tooltip: {
                ...option['tooltip'],
                formatter: (params) => this._e_templates(params)
            }
        })
        return this
    }
    setType(type) {
        this.type = type
        return this
    }
    clear() {
        this.instance.clear()
        return this
    }
    _format_number_unit(n) {
        var d = (n + "").split("."), i = d[0], f = d.length >= 2 ? "." + d.slice(1).join(".") : ""
        return i.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + f;
    }
    resize() {
        this.instance.resize()
        return this
    }
    _e_templates(params) {
        const value_formatter = this.formatter
        const data_label = this.type == EchartType.LABEL
        const templates = `<div style="margin: 0px 0 0;line-height:1;"><div style="margin: 0px 0 0;line-height:1;">` + (data_label ? '' : `<span style="display:inline-block;margin-right:4px;border-radius:10px;width:10px;height:10px;background-color:{color};"></span>`) + `<span style="font-size:14px;color:#666;font-weight:400;margin-left:2px">{name}</span><span style="float:right;margin-left:20px;font-size:14px;color:#666;font-weight:900">{value}</span><div style="clear:both"></div></div><div style="clear:both"></div></div>`
        var template = ''
        for (const data of (Array.isArray(params) ? params : [params])) {
            let value = isNaN(data.value) ? 0 : data.value
            template += templates.replace("{color}", data.color).replace("{name}", `${data.seriesName}${data_label ? `(${data.data.label})` : ""}`).replace("{value}", value_formatter ? value_formatter(value) : value)
        }
        return `<div style="margin: 0px 0 0;line-height:1;"><div style="margin: 0px 0 0;line-height:1;">` + (data_label ? `` : `<div style="font-size:14px;color:#666;font-weight:400;line-height:1;">${(Array.isArray(params) ? params[0] : params).name}</div>`) + `<div style="margin: ${data_label ? 0 : 10}px 0 0;line-height:1;">${template}</div><div style="clear:both"></div></div><div style="clear:both"></div></div>`
    }
    getOption() {
        return this.instance.getOption()
    }
}
class Modal extends Element {
    constructor() {
        super("div")
        this.$Styles = {
            ".modal": [
                "display: flex",
                "justify-content: center",
                "align-items: center",
                "flex-direction: column;",
                "flex-wrap: nowrap;",
                "background: rgba(0, 0, 0, 0.8)",
                "z-index: 999",
                "position: fixed",
                "left: 0",
                "top: 0",
                "height: 100vh",
                "width: 100vw",
                "opacity: 0;",
                "transition: opacity 225ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;"
            ],
            ".modal.open": [
                "opacity: 1;", 
            ],
            ".modal-container": [
                "display: flex",
                "justify-content: center",
                "align-items: center",
                "flex-direction: column;",
                "flex-wrap: nowrap;",
                "max-width: 800px",
            ],
        }
        this.class("modal")
        this._container = (new Element("div")).class("modal-container")
        this.append(this._container)
        this.event("click", (event) => {
            if (event.target == this.base) this.close()
        })
        app.$Style.setStyles(this.$Styles)
        this.timer = null
        this.opened = false
    }
    open() {
        if (this.opened) return this
        this.opened = true
        this.timer = app.runTaskLater(() => {
            this.class("open")
        }, 50)
        document.body.style.overflow = "hidden"
        document.body.prepend(this.valueOf())
        return this
    }
    body(...element) {
        this._container.append(...element)
        return this
    }
    close() {
        if (!this.opened) return this
        this.opened = false;
        this.timer = app.runTaskLater(() => {
            document.body.removeChild(this.valueOf())
        }, 250)
        document.body.style.overflow = "auto"
        this.removeClass("open")
        return this
    }
}
const $I18N = new I18NManager()
$I18N.addLangs("zh_cn", {
    "dashboard.uptime": "运行时间",
    "dashboard.status": "当前状态",
    "dashboard.today.requests": "今日下载数",
    "dashboard.today.filebytes": "今日下载量",
    "dashboard.in30days.requests": "30 天下载数",
    "dashboard.in30days.filebytes": "30 天下载量",
    "dashboard.connections": "连接数",
    "dashboard.memory": "内存情况",
    "dashboard.file_cache": "文件缓存情况",
    "dashboard.in5mins.load": "5 分钟负载",
    "dashboard.in5mins.requests": "5 分钟请求数",
    "dashboard.download.hourly": "每小时下载数",
    "dashboard.bytes.hourly": "每小时下载量",
    "dashboard.download.daily": "30 天内下载数",
    "dashboard.bytes.daily": "30 天内下载量",
    "unit.hourly": "%hour% 时",
    "dashboard.io.hits": "I/O 击中数",
    "dashboard.cache.hits": "缓存击中数",
    "dashboard.io.bytes": "I/O 击中量",
    "dashboard.cache.bytes": "缓存击中量",
    "dashboard.geo": "地理位置",
    "dashboard.distincts": "独立 IP",
    "dashboard.peer": "峰值 %peer%",
    "dashboard.basic": "基础统计",
    "dashboard.pro": "高级统计",
    "dashboard.geo.world": "世界",
    "dashboard.geo.china": "中国",
    "dashboard.last.day.1": "近 24 小时",
    "dashboard.last.day.7": "近 7 天",
    "dashboard.last.day.30": "近 30 天",
    "dashboard.useragents": "下载客户端",
    "dashboard.download.hits": "存储占用情况",
    "menu.dashboard": "数据统计",
    "menu.master": "主控面板",
    "menu.master.rank": "排行榜",
    "menu.config": "配置",
    "menu.config.storage": "存储设置",
    "tqdm": "%value%/%total%, %item%/s",
    "storage.webdav": "正在获取WebDav文件中",
    "cluster.want_enable": "正在启用",
    "cluster.enabled.trusted": "正常工作",
    "cluster.enabled": "正常工作（节点信任度过低）",
    "files.checking": "正在检查文件中",
    "files.downloading": "下载文件中",
    "files.delete_old": "删除旧文件中",
    "files.copying": "复制文件中",
    "cluster.got.cert": "成功获取证书",
    "cluster.get.cert": "获取证书中",
    "files.fetching": "获取文件中",
    "province.上海": "上海",
    "province.云南": "云南",
    "province.内蒙古":"内蒙古",
    "province.北京": "北京",
    "province.台湾": "台湾",
    "province.吉林": "吉林",
    "province.四川": "四川",
    "province.天津": "天津",
    "province.宁夏": "宁夏",
    "province.安徽": "安徽",
    "province.山东": "山东",
    "province.山西": "山西",
    "province.广东": "广东",
    "province.广西": "广西",
    "province.新疆": "新疆",
    "province.江苏": "江苏",
    "province.江西": "江西",
    "province.河北": "河北",
    "province.河南": "河南",
    "province.浙江": "浙江",
    "province.海南": "海南",
    "province.湖北": "湖北",
    "province.湖南": "湖南",
    "province.澳门": "澳门",
    "province.甘肃": "甘肃",
    "province.福建": "福建",
    "province.西藏": "西藏",
    "province.贵州": "贵州",
    "province.辽宁": "辽宁",
    "province.重庆": "重庆",
    "province.陕西": "陕西",
    "province.青海": "青海",
    "province.香港": "香港",
    "province.黑龙江":"黑龙江",
    "country.LOCAL": "内网",
    "country.CN": "中国",
    "country.AD": "安道尔",
    "country.AE": "阿联酋",
    "country.AF": "阿富汗",
    "country.AG": "安提瓜和巴布达",
    "country.AI": "安圭拉",
    "country.AL": "阿尔巴尼亚",
    "country.AM": "亚美尼亚",
    "country.AO": "安哥拉",
    "country.AQ": "南极洲",
    "country.AR": "阿根廷",
    "country.AS": "美属萨摩亚",
    "country.AT": "奥地利",
    "country.AU": "澳大利亚",
    "country.AW": "阿鲁巴",
    "country.AX": "奥兰",
    "country.AZ": "阿塞拜疆",
    "country.BA": "波斯尼亚和黑塞哥维那",
    "country.BB": "巴巴多斯",
    "country.BD": "孟加拉国",
    "country.BE": "比利时",
    "country.BF": "布基纳法索",
    "country.BG": "保加利亚",
    "country.BH": "巴林",
    "country.BI": "布隆迪",
    "country.BJ": "贝宁",
    "country.BL": "圣巴泰勒米",
    "country.BM": "百慕大",
    "country.BN": "文莱",
    "country.BO": "玻利维亚",
    "country.BQ": "加勒比荷兰",
    "country.BR": "巴西",
    "country.BS": "巴哈马",
    "country.BT": "不丹",
    "country.BV": "布韦岛",
    "country.BW": "博茨瓦纳",
    "country.BY": "白俄罗斯",
    "country.BZ": "伯利兹",
    "country.CA": "加拿大",
    "country.CC": "科科斯（基林）群岛",
    "country.CD": "刚果（金）",
    "country.CF": "中非",
    "country.CG": "刚果（布）",
    "country.CH": "瑞士",
    "country.CI": "科特迪瓦",
    "country.CK": "库克群岛",
    "country.CL": "智利",
    "country.CM": "喀麦隆",
    "country.CO": "哥伦比亚",
    "country.CR": "哥斯达黎加",
    "country.CU": "古巴",
    "country.CV": "佛得角",
    "country.CW": "库拉索",
    "country.CX": "圣诞岛",
    "country.CY": "塞浦路斯",
    "country.CZ": "捷克",
    "country.DE": "德国",
    "country.DJ": "吉布提",
    "country.DK": "丹麦",
    "country.DM": "多米尼克",
    "country.DO": "多米尼加",
    "country.DZ": "阿尔及利亚",
    "country.EC": "厄瓜多尔",
    "country.EE": "爱沙尼亚",
    "country.EG": "埃及",
    "country.EH": "阿拉伯撒哈拉民主共和国",
    "country.ER": "厄立特里亚",
    "country.ES": "西班牙",
    "country.ET": "埃塞俄比亚",
    "country.FI": "芬兰",
    "country.FJ": "斐济",
    "country.FK": "福克兰群岛",
    "country.FM": "密克罗尼西亚联邦",
    "country.FO": "法罗群岛",
    "country.FR": "法国",
    "country.GA": "加蓬",
    "country.GB": "英国",
    "country.GD": "格林纳达",
    "country.GE": "格鲁吉亚",
    "country.GF": "法属圭亚那",
    "country.GG": "根西",
    "country.GH": "加纳",
    "country.GI": "直布罗陀",
    "country.GL": "格陵兰",
    "country.GM": "冈比亚",
    "country.GN": "几内亚",
    "country.GP": "瓜德罗普",
    "country.GQ": "赤道几内亚",
    "country.GR": "希腊",
    "country.GS": "南乔治亚和南桑威奇群岛",
    "country.GT": "危地马拉",
    "country.GU": "关岛",
    "country.GW": "几内亚比绍",
    "country.GY": "圭亚那",
    "country.HM": "赫德岛和麦克唐纳群岛",
    "country.HN": "洪都拉斯",
    "country.HR": "克罗地亚",
    "country.HT": "海地",
    "country.HU": "匈牙利",
    "country.ID": "印尼",
    "country.IE": "爱尔兰",
    "country.IL": "以色列",
    "country.IM": "马恩岛",
    "country.IN": "印度",
    "country.IO": "英属印度洋领地",
    "country.IQ": "伊拉克",
    "country.IR": "伊朗",
    "country.IS": "冰岛",
    "country.IT": "意大利",
    "country.JE": "泽西",
    "country.JM": "牙买加",
    "country.JO": "约旦",
    "country.JP": "日本",
    "country.KE": "肯尼亚",
    "country.KG": "吉尔吉斯斯坦",
    "country.KH": "柬埔寨",
    "country.KI": "基里巴斯",
    "country.KM": "科摩罗",
    "country.KN": "圣基茨和尼维斯",
    "country.KP": "朝鲜",
    "country.KR": "韩国",
    "country.KW": "科威特",
    "country.KY": "开曼群岛",
    "country.KZ": "哈萨克斯坦",
    "country.LA": "老挝",
    "country.LB": "黎巴嫩",
    "country.LC": "圣卢西亚",
    "country.LI": "列支敦士登",
    "country.LK": "斯里兰卡",
    "country.LR": "利比里亚",
    "country.LS": "莱索托",
    "country.LT": "立陶宛",
    "country.LU": "卢森堡",
    "country.LV": "拉脱维亚",
    "country.LY": "利比亚",
    "country.MA": "摩洛哥",
    "country.MC": "摩纳哥",
    "country.MD": "摩尔多瓦",
    "country.ME": "黑山",
    "country.MF": "法属圣马丁",
    "country.MG": "马达加斯加",
    "country.MH": "马绍尔群岛",
    "country.MK": "马其顿",
    "country.ML": "马里",
    "country.MM": "缅甸",
    "country.MN": "蒙古",
    "country.MP": "北马里亚纳群岛",
    "country.MQ": "马提尼克",
    "country.MR": "毛里塔尼亚",
    "country.MS": "蒙特塞拉特",
    "country.MT": "马耳他",
    "country.MU": "毛里求斯",
    "country.MV": "马尔代夫",
    "country.MW": "马拉维",
    "country.MX": "墨西哥",
    "country.MY": "马来西亚",
    "country.MZ": "莫桑比克",
    "country.NA": "纳米比亚",
    "country.NC": "新喀里多尼亚",
    "country.NE": "尼日尔",
    "country.NF": "诺福克岛",
    "country.NG": "尼日利亚",
    "country.NI": "尼加拉瓜",
    "country.NL": "荷兰",
    "country.NO": "挪威",
    "country.NP": "尼泊尔",
    "country.NR": "瑙鲁",
    "country.NU": "纽埃",
    "country.NZ": "新西兰",
    "country.OM": "阿曼",
    "country.PA": "巴拿马",
    "country.PE": "秘鲁",
    "country.PF": "法属波利尼西亚",
    "country.PG": "巴布亚新几内亚",
    "country.PH": "菲律宾",
    "country.PK": "巴基斯坦",
    "country.PL": "波兰",
    "country.PM": "圣皮埃尔和密克隆",
    "country.PN": "皮特凯恩群岛",
    "country.PR": "波多黎各",
    "country.PS": "巴勒斯坦",
    "country.PT": "葡萄牙",
    "country.PW": "帕劳",
    "country.PY": "巴拉圭",
    "country.QA": "卡塔尔",
    "country.RE": "留尼汪",
    "country.RO": "罗马尼亚",
    "country.RS": "塞尔维亚",
    "country.RU": "俄罗斯",
    "country.RW": "卢旺达",
    "country.SA": "沙特阿拉伯",
    "country.SB": "所罗门群岛",
    "country.SC": "塞舌尔",
    "country.SD": "苏丹",
    "country.SE": "瑞典",
    "country.SG": "新加坡",
    "country.SH": "圣赫勒拿",
    "country.SI": "斯洛文尼亚",
    "country.SJ": "挪威",
    "country.SK": "斯洛伐克",
    "country.SL": "塞拉利昂",
    "country.SM": "圣马力诺",
    "country.SN": "塞内加尔",
    "country.SO": "索马里",
    "country.SR": "苏里南",
    "country.SS": "南苏丹",
    "country.ST": "圣多美和普林西比",
    "country.SV": "萨尔瓦多",
    "country.SX": "荷属圣马丁",
    "country.SY": "叙利亚",
    "country.SZ": "斯威士兰",
    "country.TC": "特克斯和凯科斯群岛",
    "country.TD": "乍得",
    "country.TF": "法属南方和南极洲领地",
    "country.TG": "多哥",
    "country.TH": "泰国",
    "country.TJ": "塔吉克斯坦",
    "country.TK": "托克劳",
    "country.TL": "东帝汶",
    "country.TM": "土库曼斯坦",
    "country.TN": "突尼斯",
    "country.TO": "汤加",
    "country.TR": "土耳其",
    "country.TT": "特立尼达和多巴哥",
    "country.TV": "图瓦卢",
    "country.TZ": "坦桑尼亚",
    "country.UA": "乌克兰",
    "country.UG": "乌干达",
    "country.UM": "美国本土外小岛屿",
    "country.US": "美国",
    "country.UY": "乌拉圭",
    "country.UZ": "乌兹别克斯坦",
    "country.VA": "梵蒂冈",
    "country.VC": "圣文森特和格林纳丁斯",
    "country.VE": "委内瑞拉",
    "country.VG": "英属维尔京群岛",
    "country.VI": "美属维尔京群岛",
    "country.VN": "越南",
    "country.VU": "瓦努阿图",
    "country.WF": "瓦利斯和富图纳",
    "country.WS": "萨摩亚",
    "country.YE": "也门",
    "country.YT": "马约特",
    "country.ZA": "南非",
    "country.ZM": "赞比亚",
    "country.ZW": "津巴布韦",
});
$I18N.addLangs("en_us", {
    "province.上海": "Shanghai",
    "province.云南": "Yunnan",
    "province.内蒙古": "Inner Mongolia",
    "province.北京": "Beijing",
    "province.台湾": "Taiwan",
    "province.吉林": "Jilin",
    "province.四川": "Sichuan",
    "province.天津": "Tianjin",
    "province.宁夏": "Ningxia",
    "province.安徽": "Anhui",
    "province.山东": "Shandong",
    "province.山西": "Shanxi",
    "province.广东": "Guangdong",
    "province.广西": "Guangxi",
    "province.新疆": "Xinjiang",
    "province.江苏": "Jiangsu",
    "province.江西": "Jiangxi",
    "province.河北": "Hebei",
    "province.河南": "Henan",
    "province.浙江": "Zhejiang",
    "province.海南": "Hainan",
    "province.湖北": "Hubei",
    "province.湖南": "Hunan",
    "province.澳门": "Macao",
    "province.甘肃": "Gansu",
    "province.福建": "Fujian",
    "province.西藏": "Tibet",
    "province.贵州": "Guizhou",
    "province.辽宁": "Liaoning",
    "province.重庆": "Chongqing",
    "province.陕西": "Shaanxi",
    "province.青海": "Qinhai",
    "province.香港": "Hong Kong",
    "province.黑龙江": "Heilongjiang",
    "country.LOCAL": "Local Address",
    "country.CN": "China",
    "country.AD": "Andorra",
    "country.AE": "United Arab Emirates",
    "country.AF": "Afghanistan",
    "country.AG": "Antigua and Barbuda",
    "country.AI": "Anguilla",
    "country.AL": "Albania",
    "country.AM": "Armenia",
    "country.AO": "Angola",
    "country.AQ": "Antarctica",
    "country.AR": "Argentina",
    "country.AS": "American Samoa",
    "country.AT": "Austria",
    "country.AU": "Australia",
    "country.AW": "Aruba",
    "country.AX": "Aland Islands",
    "country.AZ": "Azerbaijan",
    "country.BA": "Bosnia and Herzegovina",
    "country.BB": "Barbados",
    "country.BD": "Bangladesh",
    "country.BE": "Belgium",
    "country.BF": "Burkina Faso",
    "country.BG": "Bulgaria",
    "country.BH": "Bahrain",
    "country.BI": "Burundi",
    "country.BJ": "Benin",
    "country.BL": "Saint Barthelemy",
    "country.BM": "Bermuda",
    "country.BN": "Brunei",
    "country.BO": "Bolivia",
    "country.BQ": "Bonaire , Saint Eustatius and Saba",
    "country.BR": "Brazil",
    "country.BS": "Bahamas",
    "country.BT": "Bhutan",
    "country.BV": "Bouvet Island",
    "country.BW": "Botswana",
    "country.BY": "Belarus",
    "country.BZ": "Belize",
    "country.CA": "Canada",
    "country.CC": "Cocos Islands",
    "country.CD": "Democratic Republic of the Congo",
    "country.CF": "Central African Republic",
    "country.CG": "Republic of the Congo",
    "country.CH": "Switzerland",
    "country.CI": "Ivory Coast",
    "country.CK": "Cook Islands",
    "country.CL": "Chile",
    "country.CM": "Cameroon",
    "country.CO": "Colombia",
    "country.CR": "Costa Rica",
    "country.CU": "Cuba",
    "country.CV": "Cape Verde",
    "country.CW": "Curacao",
    "country.CX": "Christmas Island",
    "country.CY": "Cyprus",
    "country.CZ": "Czech Republic",
    "country.DE": "Germany",
    "country.DJ": "Djibouti",
    "country.DK": "Denmark",
    "country.DM": "Dominica",
    "country.DO": "Dominican Republic",
    "country.DZ": "Algeria",
    "country.EC": "Ecuador",
    "country.EE": "Estonia",
    "country.EG": "Egypt",
    "country.EH": "Western Sahara",
    "country.ER": "Eritrea",
    "country.ES": "Spain",
    "country.ET": "Ethiopia",
    "country.FI": "Finland",
    "country.FJ": "Fiji",
    "country.FK": "Falkland Islands",
    "country.FM": "Micronesia",
    "country.FO": "Faroe Islands",
    "country.FR": "France",
    "country.GA": "Gabon",
    "country.GB": "United Kingdom",
    "country.GD": "Grenada",
    "country.GE": "Georgia",
    "country.GF": "French Guiana",
    "country.GG": "Guernsey",
    "country.GH": "Ghana",
    "country.GI": "Gibraltar",
    "country.GL": "Greenland",
    "country.GM": "Gambia",
    "country.GN": "Guinea",
    "country.GP": "Guadeloupe",
    "country.GQ": "Equatorial Guinea",
    "country.GR": "Greece",
    "country.GS": "South Georgia and the South Sandwich Islands",
    "country.GT": "Guatemala",
    "country.GU": "Guam",
    "country.GW": "Guinea -Bissau",
    "country.GY": "Guyana",
    "country.HM": "Heard Island and McDonald Islands",
    "country.HN": "Honduras",
    "country.HR": "Croatia",
    "country.HT": "Haiti",
    "country.HU": "Hungary",
    "country.ID": "Indonesia",
    "country.IE": "Ireland",
    "country.IL": "Israel",
    "country.IM": "Isle of Man",
    "country.IN": "India",
    "country.IO": "British Indian Ocean Territory",
    "country.IQ": "Iraq",
    "country.IR": "Iran",
    "country.IS": "Iceland",
    "country.IT": "Italy",
    "country.JE": "Jersey",
    "country.JM": "Jamaica",
    "country.JO": "Jordan",
    "country.JP": "Japan",
    "country.KE": "Kenya",
    "country.KG": "Kyrgyzstan",
    "country.KH": "Cambodia",
    "country.KI": "Kiribati",
    "country.KM": "Comoros",
    "country.KN": "Saint Kitts and Nevis",
    "country.KP": "North Korea",
    "country.KR": "South Korea",
    "country.KW": "Kuwait",
    "country.KY": "Cayman Islands",
    "country.KZ": "Kazakhstan",
    "country.LA": "Laos",
    "country.LB": "Lebanon",
    "country.LC": "Saint Lucia",
    "country.LI": "Liechtenstein",
    "country.LK": "Sri Lanka",
    "country.LR": "Liberia",
    "country.LS": "Lesotho",
    "country.LT": "Lithuania",
    "country.LU": "Luxembourg",
    "country.LV": "Latvia",
    "country.LY": "Libya",
    "country.MA": "Morocco",
    "country.MC": "Monaco",
    "country.MD": "Moldova",
    "country.ME": "Montenegro",
    "country.MF": "Saint Martin",
    "country.MG": "Madagascar",
    "country.MH": "Marshall Islands",
    "country.MK": "Macedonia",
    "country.ML": "Mali",
    "country.MM": "Myanmar",
    "country.MN": "Mongolia",
    "country.MP": "Northern Mariana Islands",
    "country.MQ": "Martinique",
    "country.MR": "Mauritania",
    "country.MS": "Montserrat",
    "country.MT": "Malta",
    "country.MU": "Mauritius",
    "country.MV": "Maldives",
    "country.MW": "Malawi",
    "country.MX": "Mexico",
    "country.MY": "Malaysia",
    "country.MZ": "Mozambique",
    "country.NA": "Namibia",
    "country.NC": "New Caledonia",
    "country.NE": "Niger",
    "country.NF": "Norfolk Island",
    "country.NG": "Nigeria",
    "country.NI": "Nicaragua",
    "country.NL": "Netherlands",
    "country.NO": "Norway",
    "country.NP": "Nepal",
    "country.NR": "Nauru",
    "country.NU": "Niue",
    "country.NZ": "New Zealand",
    "country.OM": "Oman",
    "country.PA": "Panama",
    "country.PE": "Peru",
    "country.PF": "French Polynesia",
    "country.PG": "Papua New Guinea",
    "country.PH": "Philippines",
    "country.PK": "Pakistan",
    "country.PL": "Poland",
    "country.PM": "Saint Pierre and Miquelon",
    "country.PN": "Pitcairn",
    "country.PR": "Puerto Rico",
    "country.PS": "Palestinian Territory",
    "country.PT": "Portugal",
    "country.PW": "Palau",
    "country.PY": "Paraguay",
    "country.QA": "Qatar",
    "country.RE": "Reunion",
    "country.RO": "Romania",
    "country.RS": "Serbia",
    "country.RU": "Russia",
    "country.RW": "Rwanda",
    "country.SA": "Saudi Arabia",
    "country.SB": "Solomon Islands",
    "country.SC": "Seychelles",
    "country.SD": "Sudan",
    "country.SE": "Sweden",
    "country.SG": "Singapore",
    "country.SH": "Saint Helena",
    "country.SI": "Slovenia",
    "country.SJ": "Svalbard and Jan Mayen",
    "country.SK": "Slovakia",
    "country.SL": "Sierra Leone",
    "country.SM": "San Marino",
    "country.SN": "Senegal",
    "country.SO": "Somalia",
    "country.SR": "Suriname",
    "country.SS": "South Sudan",
    "country.ST": "Sao Tome and Principe",
    "country.SV": "El Salvador",
    "country.SX": "Sint Maarten",
    "country.SY": "Syria",
    "country.SZ": "Swaziland",
    "country.TC": "Turks and Caicos Islands",
    "country.TD": "Chad",
    "country.TF": "French Southern Territories",
    "country.TG": "Togo",
    "country.TH": "Thailand",
    "country.TJ": "Tajikistan",
    "country.TK": "Tokelau",
    "country.TL": "East Timor",
    "country.TM": "Turkmenistan",
    "country.TN": "Tunisia",
    "country.TO": "Tonga",
    "country.TR": "Turkey",
    "country.TT": "Trinidad and Tobago",
    "country.TV": "Tuvalu",
    "country.TZ": "Tanzania",
    "country.UA": "Ukraine",
    "country.UG": "Uganda",
    "country.UM": "United States Minor Outlying Islands",
    "country.US": "United States",
    "country.UY": "Uruguay",
    "country.UZ": "Uzbekistan",
    "country.VA": "Vatican",
    "country.VC": "Saint Vincent and the Grenadines",
    "country.VE": "Venezuela",
    "country.VG": "British Virgin Islands",
    "country.VI": "U .S. Virgin Islands",
    "country.VN": "Vietnam",
    "country.VU": "Vanuatu",
    "country.WF": "Wallis and Futuna",
    "country.WS": "Samoa",
    "country.YE": "Yemen",
    "country.YT": "Mayotte",
    "country.ZA": "South Africa",
    "country.ZM": "Zambia",
    "country.ZW": "Zimbabwe",
})
const $Country = [{ code: "LOCAL", name: "内网", name_en: "Local Address"}, { code:"AF", name: "阿富汗", name_en: "Afghanistan" }, { code: "AX", name: "奥兰", name_en: "Åland Islands" }, { code: "AL", name: "阿尔巴尼亚", name_en: "Albania" }, { code: "DZ", name: "阿尔及利亚", name_en: "Algeria" }, { code: "AS", name: "美属萨摩亚", name_en: "American Samoa" }, { code: "AD", name: "安道尔", name_en: "Andorra" }, { code: "AO", name: "安哥拉", name_en: "Angola" }, { code: "AI", name: "安圭拉", name_en: "Anguilla" }, { code: "AQ", name: "南极洲", name_en: "Antarctica" }, { code: "AG", name: "安提瓜和巴布达", name_en: "Antigua and Barbuda" }, { code: "AR", name: "阿根廷", name_en: "Argentina" }, { code: "AM", name: "亚美尼亚", name_en: "Armenia" }, { code: "AW", name: "阿鲁巴", name_en: "Aruba" }, { code: "AU", name: "澳大利亚", name_en: "Australia" }, { code: "AT", name: "奥地利", name_en: "Austria" }, { code: "AZ", name: "阿塞拜疆", name_en: "Azerbaijan" }, { code: "BS", name: "巴哈马", name_en: "Bahamas" }, { code: "BH", name: "巴林", name_en: "Bahrain" }, { code: "BD", name: "孟加拉国", name_en: "Bangladesh" }, { code: "BB", name: "巴巴多斯", name_en: "Barbados" }, { code: "BY", name: "白俄罗斯", name_en: "Belarus" }, { code: "BE", name: "比利时", name_en: "Belgium" }, { code: "BZ", name: "伯利兹", name_en: "Belize" }, { code: "BJ", name: "贝宁", name_en: "Benin" }, { code: "BM", name: "百慕大", name_en: "Bermuda" }, { code: "BT", name: "不丹", name_en: "Bhutan" }, { code: "BO", name: "玻利维亚", name_en: "Bolivia (Plurinational State of)" }, { code: "BQ", name: "荷兰加勒比区", name_en: "Bonaire,Sint Eustatius and Saba" }, { code: "BA", name: "波黑", name_en: "Bosnia and Herzegovina" }, { code: "BW", name: "博茨瓦纳", name_en: "Botswana" }, { code: "BV", name: "布韦岛", name_en: "Bouvet Island" }, { code: "BR", name: "巴西", name_en: "Brazil" }, { code: "IO", name: "英属印度洋领地", name_en: "British Indian Ocean Territory" }, { code: "BN", name: "文莱", name_en: "Brunei Darussalam" }, { code: "BG", name: "保加利亚", name_en: "Bulgaria" }, { code: "BF", name: "布基纳法索", name_en: "Burkina Faso" }, { code: "BI", name: "布隆迪", name_en: "Burundi" }, { code: "CV", name: "佛得角", name_en: "Cabo Verde" }, { code: "KH", name: "柬埔寨", name_en: "Cambodia" }, { code: "CM", name: "喀麦隆", name_en: "Cameroon" }, { code: "CA", name: "加拿大", name_en: "Canada" }, { code: "KY", name: "开曼群岛", name_en: "Cayman Islands" }, { code: "CF", name: "中非", name_en: "Central African Republic" }, { code: "TD", name: "乍得", name_en: "Chad" }, { code: "CL", name: "智利", name_en: "Chile" }, { code: "CN", name: "中国", name_en: "China" }, { code: "CX", name: "圣诞岛", name_en: "Christmas Island" }, { code: "CC", name: "科科斯（基林）群岛", name_en: "Cocos (Keeling) Islands" }, { code: "CO", name: "哥伦比亚", name_en: "Colombia" }, { code: "KM", name: "科摩罗", name_en: "Comoros" }, { code: "CG", name: "刚果共和国", name_en: "Congo" }, { code: "CD", name: "刚果民主共和国", name_en: "Congo (Democratic Republic of the)" }, { code: "CK", name: "库克群岛", name_en: "Cook Islands" }, { code: "CR", name: "哥斯达黎加", name_en: "Costa Rica" }, { code: "CI", name: "科特迪瓦", name_en: "Côte d'Ivoire" }, { code: "HR", name: "克罗地亚", name_en: "Croatia" }, { code: "CU", name: "古巴", name_en: "Cuba" }, { code: "CW", name: "库拉索", name_en: "Curacao !Curaçao" }, { code: "CY", name: "塞浦路斯", name_en: "Cyprus" }, { code: "CZ", name: "捷克", name_en: "Czechia" }, { code: "DK", name: "丹麦", name_en: "Denmark" }, { code: "DJ", name: "吉布提", name_en: "Djibouti" }, { code: "DM", name: "多米尼克", name_en: "Dominica" }, { code: "DO", name: "多米尼加", name_en: "Dominican Republic" }, { code: "EC", name: "厄瓜多尔", name_en: "Ecuador" }, { code: "EG", name: "埃及", name_en: "Egypt" }, { code: "SV", name: "萨尔瓦多", name_en: "El Salvador" }, { code: "GQ", name: "赤道几内亚", name_en: "Equatorial Guinea" }, { code: "ER", name: "厄立特里亚", name_en: "Eritrea" }, { code: "EE", name: "爱沙尼亚", name_en: "Estonia" }, { code: "SZ", name: "斯威士兰", name_en: "Eswatini" }, { code: "ET", name: "埃塞俄比亚", name_en: "Ethiopia" }, { code: "FK", name: "福克兰群岛", name_en: "Falkland Islands (Malvinas)" }, { code: "FO", name: "法罗群岛", name_en: "Faroe Islands" }, { code: "FJ", name: "斐济", name_en: "Fiji" }, { code: "FI", name: "芬兰", name_en: "Finland" }, { code: "FR", name: "法国", name_en: "France" }, { code: "GF", name: "法属圭亚那", name_en: "French Guiana" }, { code: "PF", name: "法属波利尼西亚", name_en: "French Polynesia" }, { code: "TF", name: "法属南部和南极领地", name_en: "French Southern Territories" }, { code: "GA", name: "加蓬", name_en: "Gabon" }, { code: "GM", name: "冈比亚", name_en: "Gambia" }, { code: "GE", name: "格鲁吉亚", name_en: "Georgia" }, { code: "DE", name: "德国", name_en: "Germany" }, { code: "GH", name: "加纳", name_en: "Ghana" }, { code: "GI", name: "直布罗陀", name_en: "Gibraltar" }, { code: "GR", name: "希腊", name_en: "Greece" }, { code: "GL", name: "格陵兰", name_en: "Greenland" }, { code: "GD", name: "格林纳达", name_en: "Grenada" }, { code: "GP", name: "瓜德罗普", name_en: "Guadeloupe" }, { code: "GU", name: "关岛", name_en: "Guam" }, { code: "GT", name: "危地马拉", name_en: "Guatemala" }, { code: "GG", name: "根西", name_en: "Guernsey" }, { code: "GN", name: "几内亚", name_en: "Guinea" }, { code: "GW", name: "几内亚比绍", name_en: "Guinea-Bissau" }, { code: "GY", name: "圭亚那", name_en: "Guyana" }, { code: "HT", name: "海地", name_en: "Haiti" }, { code: "HM", name: "赫德岛和麦克唐纳群岛", name_en: "Heard Island and McDonald Islands" }, { code: "VA", name: "梵蒂冈", name_en: "Holy See" }, { code: "HN", name: "洪都拉斯", name_en: "Honduras" }, { code: "HU", name: "匈牙利", name_en: "Hungary" }, { code: "IS", name: "冰岛", name_en: "Iceland" }, { code: "IN", name: "印度", name_en: "India" }, { code: "ID", name: "印尼", name_en: "Indonesia" }, { code: "IR", name: "伊朗", name_en: "Iran (Islamic Republic of)" }, { code: "IQ", name: "伊拉克", name_en: "Iraq" }, { code: "IE", name: "爱尔兰", name_en: "Ireland" }, { code: "IM", name: "马恩岛", name_en: "Isle of Man" }, { code: "IL", name: "以色列", name_en: "Israel" }, { code: "IT", name: "意大利", name_en: "Italy" }, { code: "JM", name: "牙买加", name_en: "Jamaica" }, { code: "JP", name: "日本", name_en: "Japan" }, { code: "JE", name: "泽西", name_en: "Jersey" }, { code: "JO", name: "约旦", name_en: "Jordan" }, { code: "KZ", name: "哈萨克斯坦", name_en: "Kazakhstan" }, { code: "KE", name: "肯尼亚", name_en: "Kenya" }, { code: "KI", name: "基里巴斯", name_en: "Kiribati" }, { code: "KP", name: "朝鲜", name_en: "Korea (Democratic People's Republic of)" }, { code: "KR", name: "韩国", name_en: "Korea (Republic of)" }, { code: "XK", name: "科索沃", name_en: "Kosovo" }, { code: "KW", name: "科威特", name_en: "Kuwait" }, { code: "KG", name: "吉尔吉斯斯坦", name_en: "Kyrgyzstan" }, { code: "LA", name: "老挝", name_en: "Lao People's Democratic Republic" }, { code: "LV", name: "拉脱维亚", name_en: "Latvia" }, { code: "LB", name: "黎巴嫩", name_en: "Lebanon" }, { code: "LS", name: "莱索托", name_en: "Lesotho" }, { code: "LR", name: "利比里亚", name_en: "Liberia" }, { code: "LY", name: "利比亚", name_en: "Libya" }, { code: "LI", name: "列支敦士登", name_en: "Liechtenstein" }, { code: "LT", name: "立陶宛", name_en: "Lithuania" }, { code: "LU", name: "卢森堡", name_en: "Luxembourg" }, { code: "MG", name: "马达加斯加", name_en: "Madagascar" }, { code: "MW", name: "马拉维", name_en: "Malawi" }, { code: "MY", name: "马来西亚", name_en: "Malaysia" }, { code: "MV", name: "马尔代夫", name_en: "Maldives" }, { code: "ML", name: "马里", name_en: "Mali" }, { code: "MT", name: "马耳他", name_en: "Malta" }, { code: "MH", name: "马绍尔群岛", name_en: "Marshall Islands" }, { code: "MQ", name: "马提尼克", name_en: "Martinique" }, { code: "MR", name: "毛里塔尼亚", name_en: "Mauritania" }, { code: "MU", name: "毛里求斯", name_en: "Mauritius" }, { code: "YT", name: "马约特", name_en: "Mayotte" }, { code: "MX", name: "墨西哥", name_en: "Mexico" }, { code: "FM", name: "密克罗尼西亚联邦", name_en: "Micronesia (Federated States of)" }, { code: "MD", name: "摩尔多瓦", name_en: "Moldova (Republic of)" }, { code: "MC", name: "摩纳哥", name_en: "Monaco" }, { code: "MN", name: "蒙古", name_en: "Mongolia" }, { code: "ME", name: "黑山", name_en: "Montenegro" }, { code: "MS", name: "蒙特塞拉特", name_en: "Montserrat" }, { code: "MA", name: "摩洛哥", name_en: "Morocco" }, { code: "MZ", name: "莫桑比克", name_en: "Mozambique" }, { code: "MM", name: "缅甸", name_en: "Myanmar" }, { code: "NA", name: "纳米比亚", name_en: "Namibia" }, { code: "NR", name: "瑙鲁", name_en: "Nauru" }, { code: "NP", name: "尼泊尔", name_en: "Nepal" }, { code: "NL", name: "荷兰", name_en: "Netherlands" }, { code: "NC", name: "新喀里多尼亚", name_en: "New Caledonia" }, { code: "NZ", name: "新西兰", name_en: "New Zealand" }, { code: "NI", name: "尼加拉瓜", name_en: "Nicaragua" }, { code: "NE", name: "尼日尔", name_en: "Niger" }, { code: "NG", name: "尼日利亚", name_en: "Nigeria" }, { code: "NU", name: "纽埃", name_en: "Niue" }, { code: "NF", name: "诺福克岛", name_en: "Norfolk Island" }, { code: "MK", name: "北马其顿", name_en: "North Macedonia" }, { code: "MP", name: "北马里亚纳群岛", name_en: "Northern Mariana Islands" }, { code: "NO", name: "挪威", name_en: "Norway" }, { code: "OM", name: "阿曼", name_en: "Oman" }, { code: "PK", name: "巴基斯坦", name_en: "Pakistan" }, { code: "PW", name: "帕劳", name_en: "Palau" }, { code: "PS", name: "巴勒斯坦", name_en: "Palestine,State of" }, { code: "PA", name: "巴拿马", name_en: "Panama" }, { code: "PG", name: "巴布亚新几内亚", name_en: "Papua New Guinea" }, { code: "PY", name: "巴拉圭", name_en: "Paraguay" }, { code: "PE", name: "秘鲁", name_en: "Peru" }, { code: "PH", name: "菲律宾", name_en: "Philippines" }, { code: "PN", name: "皮特凯恩群岛", name_en: "Pitcairn" }, { code: "PL", name: "波兰", name_en: "Poland" }, { code: "PT", name: "葡萄牙", name_en: "Portugal" }, { code: "PR", name: "波多黎各", name_en: "Puerto Rico" }, { code: "QA", name: "卡塔尔", name_en: "Qatar" }, { code: "RE", name: "留尼汪", name_en: "Réunion" }, { code: "RO", name: "罗马尼亚", name_en: "Romania" }, { code: "RU", name: "俄罗斯", name_en: "Russian Federation" }, { code: "RW", name: "卢旺达", name_en: "Rwanda" }, { code: "BL", name: "圣巴泰勒米", name_en: "Saint Barthélemy" }, { code: "SH", name: "圣赫勒拿、阿森松和特里斯坦-达库尼亚", name_en: "Saint Helena,Ascension and Tristan da Cunha" }, { code: "KN", name: "圣基茨和尼维斯", name_en: "Saint Kitts and Nevis" }, { code: "LC", name: "圣卢西亚", name_en: "Saint Lucia" }, { code: "MF", name: "法属圣马丁", name_en: "Saint Martin (French part)" }, { code: "PM", name: "圣皮埃尔和密克隆", name_en: "Saint Pierre and Miquelon" }, { code: "VC", name: "圣文森特和格林纳丁斯", name_en: "Saint Vincent and the Grenadines" }, { code: "WS", name: "萨摩亚", name_en: "Samoa" }, { code: "SM", name: "圣马力诺", name_en: "San Marino" }, { code: "ST", name: "圣多美和普林西比", name_en: "Sao Tome and Principe" }, { code: "SA", name: "沙特阿拉伯", name_en: "Saudi Arabia" }, { code: "SN", name: "塞内加尔", name_en: "Senegal" }, { code: "RS", name: "塞尔维亚", name_en: "Serbia" }, { code: "SC", name: "塞舌尔", name_en: "Seychelles" }, { code: "SL", name: "塞拉利昂", name_en: "Sierra Leone" }, { code: "SG", name: "新加坡", name_en: "Singapore" }, { code: "SX", name: "荷属圣马丁", name_en: "Sint Maarten (Dutch part)" }, { code: "SK", name: "斯洛伐克", name_en: "Slovakia" }, { code: "SI", name: "斯洛文尼亚", name_en: "Slovenia" }, { code: "SB", name: "所罗门群岛", name_en: "Solomon Islands" }, { code: "SO", name: "索马里", name_en: "Somalia" }, { code: "ZA", name: "南非", name_en: "South Africa" }, { code: "GS", name: "南乔治亚和南桑威奇群岛", name_en: "South Georgia and the South Sandwich Islands" }, { code: "SS", name: "南苏丹", name_en: "South Sudan" }, { code: "ES", name: "西班牙", name_en: "Spain" }, { code: "LK", name: "斯里兰卡", name_en: "Sri Lanka" }, { code: "SD", name: "苏丹", name_en: "Sudan" }, { code: "SR", name: "苏里南", name_en: "Suriname" }, { code: "SJ", name: "斯瓦尔巴和扬马延", name_en: "Svalbard and Jan Mayen" }, { code: "SE", name: "瑞典", name_en: "Sweden" }, { code: "CH", name: "瑞士", name_en: "Switzerland" }, { code: "SY", name: "叙利亚", name_en: "Syrian Arab Republic" }, { code: "TJ", name: "塔吉克斯坦", name_en: "Tajikistan" }, { code: "TZ", name: "坦桑尼亚", name_en: "Tanzania,United Republic of" }, { code: "TH", name: "泰国", name_en: "Thailand" }, { code: "TL", name: "东帝汶", name_en: "Timor-Leste" }, { code: "TG", name: "多哥", name_en: "Togo" }, { code: "TK", name: "托克劳", name_en: "Tokelau" }, { code: "TO", name: "汤加", name_en: "Tonga" }, { code: "TT", name: "特立尼达和多巴哥", name_en: "Trinidad and Tobago" }, { code: "TN", name: "突尼斯", name_en: "Tunisia" }, { code: "TR", name: "土耳其", name_en: "Turkey" }, { code: "TM", name: "土库曼斯坦", name_en: "Turkmenistan" }, { code: "TC", name: "特克斯和凯科斯群岛", name_en: "Turks and Caicos Islands" }, { code: "TV", name: "图瓦卢", name_en: "Tuvalu" }, { code: "UG", name: "乌干达", name_en: "Uganda" }, { code: "UA", name: "乌克兰", name_en: "Ukraine" }, { code: "AE", name: "阿联酋", name_en: "United Arab Emirates" }, { code: "GB", name: "英国", name_en: "United Kingdom of Great Britain and Northern Ireland" }, { code: "US", name: "美国", name_en: "United States" }, { code: "UM", name: "美国本土外小岛屿", name_en: "United States Minor Outlying Islands" }, { code: "UY", name: "乌拉圭", name_en: "Uruguay" }, { code: "UZ", name: "乌兹别克斯坦", name_en: "Uzbekistan" }, { code: "VU", name: "瓦努阿图", name_en: "Vanuatu" }, { code: "VE", name: "委内瑞拉", name_en: "Venezuela (Bolivarian Republic of)" }, { code: "VN", name: "越南", name_en: "Viet Nam" }, { code: "VG", name: "英属维尔京群岛", name_en: "Virgin Islands (British)" }, { code: "VI", name: "美属维尔京群岛", name_en: "Virgin Islands (U.S.)" }, { code: "WF", name: "瓦利斯和富图纳", name_en: "Wallis and Futuna" }, { code: "EH", name: "西撒哈拉", name_en: "Western Sahara" }, { code: "YE", name: "也门", name_en: "Yemen" }, { code: "ZM", name: "赞比亚", name_en: "Zambia" }, { code: "ZW", name: "津巴布韦", name_en: "Zimbabwe" }]
const formatTime = (timestamp) => {
    timestamp = timestamp instanceof Date ? timestamp : new Date(timestamp);
    return `${timestamp.getFullYear().toString().padStart(4, '0')}-${(timestamp.getMonth() + 1).toString().padStart(2, '0')}-${timestamp.getDate().toString().padStart(2, '0')} ${timestamp.getHours().toString().padStart(2, '0')}:${timestamp.getMinutes().toString().padStart(2, '0')}:${timestamp.getSeconds().toString().padStart(2, '0')}`
}
const formatDateTime = (timestamp) => {
    timestamp = timestamp instanceof Date ? timestamp : new Date(timestamp);
    return `${timestamp.getFullYear().toString().padStart(4, '0')}-${(timestamp.getMonth() + 1).toString().padStart(2, '0')}-${timestamp.getDate().toString().padStart(2, '0')} ${timestamp.getHours().toString().padStart(2, '0')}:${timestamp.getMinutes().toString().padStart(2, '0')}`
}
const formatDate = (timestamp) => {
    timestamp = timestamp instanceof Date ? timestamp : new Date(timestamp);
    return `${timestamp.getFullYear().toString().padStart(4, '0')}-${(timestamp.getMonth() + 1).toString().padStart(2, '0')}-${timestamp.getDate().toString().padStart(2, '0')}`
}
const clamp = (min, cur, max) => {
    return Math.max(min, Math.min(cur, max));
}
const getCookie = (name) => {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) return parts.pop().split(';').shift();
    return null;
}
const fillDates = (dates) => {
    const latestDateStr = Object.keys(dates).length != 0 ? Object.keys(dates).reduce((latest, current) =>
        new Date(current + "T00:00:00Z") > new Date(latest + "T00:00:00Z") ? current : latest) : formatDate(new Date())
    const latestDate = (new Date(latestDateStr + "T00:00:00Z")).valueOf();
    const filledDates = {};

    for (let i = Object.keys(filledDates).length; i < 30; i++) {
        filledDates[formatDate(new Date(latestDate + (i - 30) * 86400000))] = 0
    }
    return { ...filledDates, ...dates };
}
const fillDateTimes = (dates, day) => {
    const latestDateStr = Object.keys(dates).length != 0 ? Object.keys(dates).reduce((latest, current) =>
        new Date(current + ":00") > new Date(latest + ":00") ? current : latest) : formatDateTime(new Date())
    const latestDate = (new Date(latestDateStr)).valueOf();
    const filledDates = {};

    for (let i = Object.keys(filledDates).length; i < 24 * day; i++) {
        filledDates[formatDateTime(new Date(latestDate + (i - 24 * day) * 3600000))] = 0
    }
    return { ...filledDates, ...dates };
}
const formatNumber = (J=0) => {
    return J >= 1e6 ? (J / 1e6).toFixed(1) + "m" : J >= 1e3 ? (J / 1e3).toFixed(1) + "k" : J
}
$github = (() => {
    for (child of document.head.children) {
        if (child.getAttribute("github")) return "//github.com/" + child.getAttribute("github")
    }
    return ""
})();
app = new Application()
const modal = new Modal()
$preloader = new Preloader()
$progress = new ProgressBar();
const logger = new Console()
const $MainSocket = new SocketData()
const dev = false;
app.$Menu.add("dashboard", new class {
    constructor() {
        this._unit_bytes = ["B", "KB", "MB", "GB", "TB", "PB", "EB"]
        this._unit_number = ["", "k", "M", "G", "T", "P", "E"]
    }
    async init() {
        this.data_day_option = 0
        this.get_globals_stats = false
        this.switch = (new ElementSwitch("dashboard.basic", "dashboard.pro")).event("click", (index) => {
            this.page[2].clear()
            this.clear()
            $progress.set(33)
            this.get_globals_stats = false
            if (index == 0) {
                this.initBasic()
                this.switch_pro_day.setStyle("display", "none")
                this.page[2].append(...this.basic)
            } else {
                this.switch_geo.select(0)
                this.switch_pro_day.setStyle("display", "")
                this.switch_pro_day.select(0)
                this.initPro()
                this.page[2].append(...this.pro)
                this.get_globals_stats = true
            }
            $progress.set(66)
            setTimeout(() => {
                this.drawQPS()
            }, 50)
            window.dispatchEvent(new Event("resize"))
            $progress.set(100)
        })
        this.switch_pro_day = (new ElementSwitch("dashboard.last.day.1", "dashboard.last.day.7", "dashboard.last.day.30")).event("click", (index) => {
            this.data_day_option = parseInt(index + "")
            if (this.get_globals_stats) {
                $progress.set(60)
                $MainSocket.send("pro_stats", { type: this.data_day_option }).then((data) => {
                    $progress.set(90)
                    this.pro_stats = data
                    this.drawGlobals()
                    this.drawGEO()
                }).finally(() => {
                    $progress.set(100)
                })
            }
        })
        this._be_qps = app.createEcharts().style("min-height: 162px;")
        this._pe_qps = app.createEcharts().style("min-height: 162px;")
        this._e_geo = app.createEcharts().style("min-height: 416px;")
        this._e_cpu = app.createEcharts().style("min-height: 162px;")
        this._e_memory = app.createEcharts().style("min-height: 162px;")
        this._e_connection = app.createEcharts().style("min-height: 162px;")
        this._e_ua = app.createEcharts().setType(EchartType.LABEL).style("min-height: 140px")
        this._r_ua = app.createElement("div").class("border-background")
        this.geo_type = "world"
        this.switch_geo = (new ElementSwitch("dashboard.geo.world", "dashboard.geo.china")).style("border: 1px solid var(--border-color);").event("click", (index) => {
            if (index == 0) this.geo_type = "world"
            else this.geo_type = "china"
            this.drawGEO()
        })
        this.switch_geo.select(0)
        this._e_visits = app.createEcharts().style("min-height: 162px;")
        this.pgeorank = (new ElementRank({})).setOption(
            {
                count: 7,
                i18n: true
            }
        )
        this.pgeorank.update(false)
        this._e_hourly = {
            hits: app.createEcharts().style("min-height: 162px;"),
            bytes: app.createEcharts().style("min-height: 162px;").setFormatter((n) => this._format_bytes(n))
        }
        this._e_daily = {
            hits: app.createEcharts().style("min-height: 162px;"),
            bytes: app.createEcharts().style("min-height: 162px;").setFormatter((n) => this._format_bytes(n))
        }
        this.page = [
            app.createElement("div").class("panel").append(
                app.createFlex().append(
                    app.createElement("div").append(
                        app.createElement("p").class("title").setI18N("dashboard.uptime"),
                        app.createElement("p").class("value").setText("-")
                    ),
                    app.createElement("div").append(
                        app.createElement("p").class("title").setI18N("dashboard.status"),
                        app.createElement("p").append(
                            app.createElement("span").class("value").setText("-"),
                            app.createElement("span").append(
                                app.createElement("span").class("value").setText(" | "),
                                app.createElement("span").class("value").setText(""),
                                app.createElement("span").class("value").setText(" "),
                                app.createElement("span").setText("")
                            ),
                        )
                    )
                ).minWidth(896).child(2)
            ),
            app.createElement("div").class("panel nopadding").style("margin-bottom: 0").append(
                app.createFlex(true).class("flex-space-between").child(2).minWidth(512).append(
                    this.switch,
                    this.switch_pro_day.class("flex-jend")
                )
            ),
            app.createElement("div")
        ]
        this.basic = [
            app.createFlex(true).minWidth(1148).childWidths(60, 40).append(
                app.createElement("div").append(
                    app.createElement("div").class("panel").append(
                        app.createFlex().child(4).append(
                            app.createElement("div").append(
                                app.createElement("p").class("title").setI18N("dashboard.today.requests"),
                                app.createElement("p").class("value").setText("-")
                            ),
                            app.createElement("div").append(
                                app.createElement("p").class("title").setI18N("dashboard.today.filebytes"),
                                app.createElement("p").class("value").setText("-")
                            ),
                            app.createElement("div").append(
                                app.createElement("p").class("title").setI18N("dashboard.in30days.requests"),
                                app.createElement("p").class("value").setText("-")
                            ),
                            app.createElement("div").append(
                                app.createElement("p").class("title").setI18N("dashboard.in30days.filebytes"),
                                app.createElement("p").class("value").setText("-")
                            )
                        ).minWidth(600)
                    ),
                    app.createElement("div").class("panel").append(
                        app.createFlex().child(4).append(
                            app.createElement("div").append(
                                app.createElement("p").class("title").setI18N("dashboard.connections"),
                                app.createElement("p").class("value").setText("-")
                            ),
                            app.createElement("div").append(
                                app.createElement("p").class("title").setI18N("dashboard.memory"),
                                app.createElement("p").class("value").setText("-")
                            ),
                            app.createElement("div").append(
                                app.createElement("p").class("title").setI18N("dashboard.file_cache"),
                                app.createElement("p").append(
                                    app.createElement("span").class("value").setText("-"),
                                    app.createElement("span")
                                )
                            ),
                            app.createElement("div").append(
                                app.createElement("p").class("title").setI18N("dashboard.in5mins.load"),
                                app.createElement("p").class("value").setText("-")
                            )
                        ).minWidth(600)
                    )
                ),
                app.createElement("div").class("panel").append(
                    app.createElement("p").class("title", "flex-space-between").append(
                        app.createElement("span").class("flex").append(
                            app.createElement("p").class("title-color").setI18N("dashboard.in5mins.requests"),
                            app.createElement("span").class("border-box").append(
                                app.createElement("i").class("bx bx-bar-chart bx-flashing").style("font-size: 18px; color: var(--main-color); padding-right: 8px"),
                                app.createElement("span").style("color: var(--title-color); font-family: Mono;").setText("-"),
                            )
                        ),
                        app.createElement("div").class("flex", "flex-aligns-center").append(
                            app.createElement("i").class("bx bx-history qps-time").style("font-size: 21px; color: var(--main-color)")
                        )
                    ),
                    this._be_qps
                )
            ),
            app.createFlex(true).child(2).append(
                app.createElement("div").class("panel").append(
                    app.createElement("p").class("title", "flex-space-between").append(
                        app.createElement("span").class("title-color").setI18N("dashboard.download.hourly"),
                        app.createElement("span").class("title-color").setI18N("dashboard.peer")
                    ),
                    this._e_hourly.hits
                ),
                app.createElement("div").class("panel").append(
                    app.createElement("p").class("title", "flex-space-between").append(
                        app.createElement("span").class("title-color").setI18N("dashboard.bytes.hourly"),
                        app.createElement("span").class("title-color").setI18N("dashboard.peer")
                    ),
                    this._e_hourly.bytes
                ),
                app.createElement("div").class("panel").append(
                    app.createElement("p").class("title", "flex-space-between").append(
                        app.createElement("span").class("title-color").setI18N("dashboard.download.daily"),
                        app.createElement("span").class("title-color").setI18N("dashboard.peer")
                    ),
                    this._e_daily.hits
                ),
                app.createElement("div").class("panel").append(
                    app.createElement("p").class("title", "flex-space-between").append(
                        app.createElement("span").class("title-color").setI18N("dashboard.bytes.daily"),
                        app.createElement("span").class("title-color").setI18N("dashboard.peer")
                    ),
                    this._e_daily.bytes
                )
            ).minWidth(1148).addResize(() => {
                for (var e of [this._e_hourly, this._e_daily]) {
                    for (var o of Object.values(e)) {
                        o.resize()
                    }
                }
                this._be_qps.resize()
            })
        ]
        this.pro = [
            app.createFlex(true)/*.class("panel").minWidth(1280).child(4).append(
                app.createElement("div").append(
                    app.createElement("p").class("title").setText("dashboard.pro."),
                    app.createElement("p").class("value").setText("dashboard.storages"),
                ),
                app.createElement("div").append(
                    app.createElement("p").class("title").setText("dashboard.pro."),
                    app.createElement("p").class("value").setText("dashboard.storages"),
                ),
                app.createElement("div").append(
                    app.createElement("p").class("title").setText("dashboard.pro."),
                    app.createElement("p").class("value").setText("dashboard.storages"),
                ),
                app.createElement("div").append(
                    app.createElement("p").class("title").setText("dashboard.pro."),
                    app.createElement("p").class("value").setText("dashboard.storages"),
                )
            ).update(),*/,
            app.createFlex(true).minWidth(1280).childWidths(70, 30).append(
                app.createElement("div").class("panel").append(
                    app.createElement("div").class("title", "flex-space-between", "flex-aligns-center").append(
                        app.createElement("span").class("title-color").setI18N("dashboard.geo"),
                        this.switch_geo
                    ),
                    app.createFlex(true).minWidth(768).childWidths(70, 30).append(
                        this._e_geo,
                        this.pgeorank,
                    ).addResize(() => {
                        this._e_geo.resize()
                        this.pgeorank.update(false)
                    })
                ),
                app.createElement("div").append(
                    app.createElement("div").class("panel").append(
                        app.createElement("p").class("title", "flex-space-between").append(
                            app.createElement("span").class("title-color").setI18N("dashboard.distincts"),
                            app.createElement("span").class("title-color").setI18N("dashboard.peer", { peer: "-" }),
                        ),
                        this._e_visits
                    ),
                    app.createElement("div").class("panel").append(
                        app.createElement("p").class("title", "flex-space-between").append(
                            app.createElement("span").class("flex").append(
                                app.createElement("p").class("title-color").setI18N("dashboard.in5mins.requests"),
                                app.createElement("span").class("border-box").append(
                                    app.createElement("i").class("bx bx-bar-chart bx-flashing").style("font-size: 18px; color: var(--main-color); padding-right: 8px"),
                                    app.createElement("span").style("color: var(--title-color); font-family: Mono;").setText("-"),
                                )
                            ),
                            app.createElement("div").class("flex", "flex-aligns-center").append(
                                app.createElement("i").class("bx bx-history qps-time").style("font-size: 21px; color: var(--main-color)")
                            )
                        ),
                        this._pe_qps
                    )
                )
            ).addResize(() => {
                this._pe_qps.resize()
                this._e_visits.resize()
            }),
            app.createFlex(true).minWidth(1280).childWidths(60, 40).append(
                app.createElement("div").class("panel").append(
                    app.createElement("div").class("title", "flex-space-between").append(
                        app.createElement("p").class("title-color").setI18N("dashboard.useragents"),
                        app.createElement("p").class("title-color").setI18N("see.more")
                    ),
                    app.createFlex(true).minWidth(512).childWidths(30, 70).append(
                        this._e_ua,
                        this._r_ua
                    ).addResize(() => {
                        this._e_ua.resize()
                    })
                ),
                app.createElement("div").class("panel").append(
                    app.createElement("p").class("title").setI18N("dashboard.download.hits"),
                ),
            )
            /*app.createFlex(true).minWidth(1280).childWidths(1 / 3 * 100.0, 1 / 3 * 100.0, 1 / 3 * 100.0).append(
                app.createElement("div").class("panel").append(
                    app.createElement("p").class("title").setText("dashboard.history.cpu"),
                    this._e_cpu
                ),
                app.createElement("div").class("panel").append(
                    app.createElement("p").class("title").setText("dashboard.history.memory"),
                    this._e_memory
                ),
                app.createElement("div").class("panel").append(
                    app.createElement("p").class("title").setText("dashboard.history.connection"),
                    this._e_connection
                )
            )*/
        ];
        this.initGlobals()
        //this.initPro()
        const refresh = () => {
            if (this.switch.selected == 0) {
                this.drawDashboard()
                this.drawQPS()
            } else {
                this.drawGEO()
                this.drawGlobals()
            }
        }
        window.addEventListener("themeChange", refresh)
        window.addEventListener("lang", refresh)
        await $MainSocket.send("uptime").then((data) => {
            this.uptime = data
        })
        await $MainSocket.send("status").then((data) => {
            this.status = data
            this.setStatus()
        })
        await $MainSocket.send("qps").then((data) => {
            this.qps = data
            this.drawQPS()
        })
        await $MainSocket.send("dashboard").then((data) => {
            this.dashboard = data
            this.drawDashboard()
        })
        if ($MainSocket.support()) {
            window.addEventListener("mainsocket_status", (data) => {
                this.status = data.detail
                this.setStatus()
            })  
        } else {
            this.statusTimer?.block()
            this.statusTimer = app.runTaskRepeat(() => {
                $MainSocket.send("status").then((data) => {
                    this.status = data
                    this.setStatus()
                })
            }, 0, 1000)
        }
        window.addEventListener("mainsocket_disconnect", (data) => {
            this.uptime = null
        })
        window.addEventListener("mainsocket_connect", (data) => {
            $MainSocket.send("uptime").then((data) => {
                this.uptime = data
            })
        })
        this.initBasic()
        this.switch.select(0)
    }
    initGlobals() {
        var option = {
            tooltip: {
                trigger: 'axis',
            },
            stateAnimation: {
                duration: 300,
                easing: "cubicOut"
            },
            xAxis: {
                type: "category",
                show: false,
            },
            yAxis: {
                show: false,
                type: "value",
            },
            grid: {
                top: 10,
                bottom: 10,
                right: 0,
                left: 0,
                show: !1,
                z: 0,
                containLabel: !1,
                backgroundColor: "rgba(0,0,0,0)",
                borderWidth: 1,
                borderColor: "#ccc"
            },
            series: [
                {
                    type: "bar",
                    barGap: "0",
                    barMinHeight: 4,
                    itemStyle: {
                        borderRadius: [2, 2, 0, 0]
                    },
                    z: 2,
                    backgroundStyle: {
                        color: "rgba(180, 180, 180, 0.2)",
                        borderColor: null,
                        borderWidth: 0,
                        borderType: "solid",
                        borderRadius: 0,
                        shadowBlur: 0,
                        shadowColor: null,
                        shadowOffsetX: 0,
                        shadowOffsetY: 0
                    },
                    select: {
                        itemStyle: {
                            borderColor: "#212121"
                        }
                    },
                }
            ]
        }
        this._be_qps.setOption(option)
        this._pe_qps.setOption(option)
        this.uptimeTimer = app.runTaskRepeat(() => {
            this.page[0].getChildren()[0].getChildren()[0].getChildren()[1].setText(this._format_time(this.uptime, true))
        }, 0, 1000)
    }
    initBasic() {
        this.initGlobals()
        this._e_options = {
            color: [
                app.getThemeVar("echarts-color-0"),
                app.getThemeVar("echarts-color-1")
            ],
            tooltip: {
                trigger: 'axis'
            },
            grid: {
                left: '3%',
                right: '4%',
                bottom: '3%',
                top: '20%',
                containLabel: true
            },
            xAxis: {
                type: 'category',
            },
            yAxis: {
                type: 'value',
                min: 1,
                max: 10
            },
            series: []
        };

        for (var e of [this._e_hourly, this._e_daily]) {
            for (var o of Object.values(e)) {
                o.setOption(this._e_options)
            }
        }
        this.setStatus();
        this.qpsTimer?.block()
        this.systemTimer?.block()
        this.qpsTimer = app.runTaskRepeat(() => {
            $MainSocket.send("qps").then((data) => {
                this.qps = data
                this.drawQPS()
            })
        }, 0, 5000)
        this.systemTimer = app.runTaskRepeat(() => {
            $MainSocket.send("system").then((data) => {
                this.system = data
                this.drawSystem()
            })
        }, 0, 1000)
        this.dashboardTimer = app.runTaskRepeat(() => {
            $MainSocket.send("dashboard").then((data) => {
                this.dashboard = data
                this.drawDashboard()
                this.drawSystem()
            })
        }, 0, 10000)
    }
    initPro() {
        this.initGlobals()
        this._e_visits.setOption({
            color: app.getThemeVar("main-color"),
            yAxis: [
                {
                    type: "value",
                    show: false
                }
            ],
            tooltip: {
                trigger: "axis",
            },
            xAxis: [
                {
                    type: "category",
                    show: false,
                }
            ],
            stateAnimation: {
                duration: 300,
                easing: "cubicOut"
            },
            grid: [
                {
                    top: 5,
                    bottom: 20,
                    right: 0,
                    left: 0,
                    show: false,
                    z: 0,
                    containLabel: false,
                    backgroundColor: "rgba(0,0,0,0)",
                    borderWidth: 1,
                    borderColor: "#ccc"
                }
            ],
            series: [
                {
                    name: $I18N.t("dashboard.distincts"),
                    type: "line",
                    symbol: "none",
                    data: [],
                    smooth: true,
                    lineStyle: {
                        width: 3,
                        color: {
                            type: "linear",
                            x: 0,
                            y: 0,
                            x2: 0,
                            y2: 1,
                            global: false,
                            colorStops: [{ offset: 0, color: app.getThemeVar("echarts-main-line-color") }, { offset: 1, color: app.getThemeVar("echarts-dark-color") }]
                        },
                        type: " solid"
                    },
                    itemStyle: { borderRadius: [2, 2, 0, 0] },
                    z: 3,
                }
            ]
        })
        this._e_geo.setOption({
            tooltip: {
                trigger: 'item',
            },
            visualMap: {
                min: 0,
                max: 100,
                inRange: {
                    color: [app.getThemeVar("echarts-none-color"), app.getThemeVar("echarts-main-color")]
                },
                textStyle: {
                    color: app.getThemeVar("echarts-main-color")
                },
                orient: 'horizontal',
            },
            series: {
                type: 'map',
                map: this.geo_type,
                itemStyle: {
                    normal: {
                        areaColor: app.getThemeVar("echarts-area-color"),//'#F7F8FA',
                        borderColor: app.getThemeVar("echarts-border-color")//'#CCC'
                    },
                    emphasis: {
                        areaColor: app.getThemeVar("echarts-emphasis-color"),//'#ADD8E6',
                        borderColor: app.getThemeVar("dark-color")//'#ffffff'
                    }
                },
                data: [],
            }
        });
        this._e_ua.setOption({
            color: [
                app.getThemeVar("echarts-color-0"),
                app.getThemeVar("echarts-color-1"),
                app.getThemeVar("echarts-color-2"),
                app.getThemeVar("echarts-color-3"),
                app.getThemeVar("echarts-color-4")
            ],
            tooltip: {
                trigger: "item"
            },
            series: [{
                type: "pie",
                name: "下载客户端",
                radius:[
                    "65%",
                    "80%"
                ],
                label:{
                    position:"inner",
                    fontSize:14,
                },
                minAngle:10,
                minShowLabelAngle:1,
                itemStyle:{
                    borderRadius:2,
                    borderWidth:2,
                    borderColor:app.getThemeVar("dark-color"),
                    borderJoin:"round"
                },
                data: []
            }]
        })
        this.setRank_UA();
        this.globalTimer = app.runTaskRepeat(() => {
            $MainSocket.send("pro_stats", { type: this.data_day_option }).then((data) => {
                this.pro_stats = data
                this.drawGlobals()
                this.drawGEO()
            })
        }, 0, 360000)
    }
    clearPro() {
        this.globalTimer?.block()
        this._e_visits.clear()
        this._e_ua.clear()
        this.pgeorank.setData()
        this.pro[1].getChildren()[1].getChildren()[0].getChildren()[0].getChildren()[1].t18n({ peer: "0" })
    }
    clearBasic() {
        this.systemTimer?.block()
        this.dashboardTimer?.block()
        this.basic[0].getChildren()[0].getChildren()[0].getChildren()[0].getChildren()[0].getChildren()[1].setText("0")
        this.basic[0].getChildren()[0].getChildren()[0].getChildren()[0].getChildren()[1].getChildren()[1].setText("0B")
        this.basic[0].getChildren()[0].getChildren()[0].getChildren()[0].getChildren()[2].getChildren()[1].setText("0")
        this.basic[0].getChildren()[0].getChildren()[0].getChildren()[0].getChildren()[3].getChildren()[1].setText("0B")
        this.basic[0].getChildren()[0].getChildren()[1].getChildren()[0].getChildren()[0].getChildren()[1].setText("0")
        this.basic[0].getChildren()[0].getChildren()[1].getChildren()[0].getChildren()[1].getChildren()[1].setText("0B")
        this.basic[0].getChildren()[0].getChildren()[1].getChildren()[0].getChildren()[2].getChildren()[1].getChildren()[0].setText("0")
        this.basic[0].getChildren()[0].getChildren()[1].getChildren()[0].getChildren()[2].getChildren()[1].getChildren()[1].setText("(0B)")
        this.basic[0].getChildren()[0].getChildren()[1].getChildren()[0].getChildren()[3].getChildren()[1].setText("0.00%")
        for (var e of [this._e_hourly, this._e_daily]) {
            for (var o of Object.values(e)) {
                o.clear()
            }
        }
    }
    clear() {
        this.clearPro()
        this.clearBasic()
        this._be_qps.clear()
        this._pe_qps.clear()
        this.basic[0].getChildren()[1].getChildren()[0].getChildren()[0].getChildren()[1].getChildren()[1].setText("0")
        this.pro[1].getChildren()[1].getChildren()[1].getChildren()[0].getChildren()[0].getChildren()[1].getChildren()[1].setText("0")
    }
    _e_templates(params, value_formatter = null) {
        const templates = `<div style="margin: 0px 0 0;line-height:1;"><div style="margin: 0px 0 0;line-height:1;"><span style="display:inline-block;margin-right:4px;border-radius:10px;width:10px;height:10px;background-color:{color};"></span><span style="font-size:14px;color:#666;font-weight:400;margin-left:2px">{name}</span><span style="float:right;margin-left:20px;font-size:14px;color:#666;font-weight:900">{value}</span><div style="clear:both"></div></div><div style="clear:both"></div></div>`
        var template = ''
        for (const data of params) {
            template += templates.replace("{color}", data.color).replace("{name}", data.name).replace("{value}", value_formatter ? value_formatter(data.value) : data.value)
        }
        return `<div style="margin: 0px 0 0;line-height:1;"><div style="margin: 0px 0 0;line-height:1;"><div style="font-size:14px;color:#666;font-weight:400;line-height:1;">${params[0].name}</div><div style="margin: 10px 0 0;line-height:1;">${template}</div><div style="clear:both"></div></div><div style="clear:both"></div></div>`
    }
    _hourly() {
        return Array.from({ length: 24 }, (_, i) => $I18N.t("unit.hourly", { hour: i }))
    }
    _daily() {
        return Array.from({ length: 31 }, (_, i) => i + " unit.daily")
    }
    _format_bytes(size, i = null) {
        if (size == 0) return `${size.toFixed(2)}${this._unit_bytes[0]}`
        i = i || Math.min(Number.parseInt(Math.floor(Math.log(size) / Math.log(1024))), this._unit_bytes.length)
        if (i <= 0) return `${size.toFixed(2)}${this._unit_bytes[0]}`
        size = size / (1024 ** i)
        return `${size.toFixed(2)}${this._unit_bytes[i]}`
    }
    _format_number_unit(n) {
        var d = (n + "").split("."), i = d[0], f = d.length >= 2 ? "." + d.slice(1).join(".") : ""
        return i.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ", ") + f;
    }
    drawDashboard() {
        const data = this.dashboard
        const hourly_data = data.hourly
        const daily_data = data.days;
        {
            let min = Math.max(...hourly_data.map(v => v._hour))
            let io, cache;
            {
                io = Array.from({ length: min }, (_, __) => 0);
                cache = Array.from({ length: min }, (_, __) => 0);
                for (const val of hourly_data) {
                    io[val._hour] = val.hits
                    cache[val._hour] = val.cache_hits
                    min = Math.max(min, val._hour)
                }
                this._e_hourly.hits.setOption({
                    color: [
                        app.getThemeVar("echarts-color-0"),
                        app.getThemeVar("echarts-color-1")
                    ],
                    xAxis: {
                        data: this._hourly()
                    },
                    legend: {
                        data: [$I18N.t("dashboard.io.hits"), $I18N.t("dashboard.cache.hits")],
                        textStyle: {
                            color: app.getThemeVar("color")
                        }
                    },
                    yAxis: {
                        max: Math.max(10, ...io, ...cache),
                    },
                    series: [{
                        name: $I18N.t("dashboard.io.hits"),
                        data: io,
                        type: 'line',
                        smooth: true,
                    }, {
                        name: $I18N.t("dashboard.cache.hits"),
                        data: cache,
                        type: 'line',
                        smooth: true
                    }]
                })
                this.basic[1].getChildren()[0].getChildren()[0].getChildren()[1].t18n({peer: Math.max(...io.map((ioVal, index) => ioVal + cache[index]))})


                io = Array.from({ length: min }, (_, __) => 0);
                cache = Array.from({ length: min }, (_, __) => 0);
                for (const val of hourly_data) {
                    io[val._hour] = val.bytes
                    cache[val._hour] = val.cache_bytes
                }
                this._e_hourly.bytes.setOption({
                    color: [
                        app.getThemeVar("echarts-color-0"),
                        app.getThemeVar("echarts-color-1")
                    ],
                    xAxis: {
                        data: this._hourly()
                    },
                    legend: {
                        data: [$I18N.t("dashboard.io.bytes"), $I18N.t("dashboard.cache.bytes")],
                        textStyle: {
                            color: app.getThemeVar("color")
                        }
                    },
                    yAxis: {
                        max: Math.max(10, ...io, ...cache),
                        axisLabel: {
                            formatter: (value) => {
                                return this._format_bytes(value)
                            }
                        }
                    },
                    series: [{
                        name: $I18N.t("dashboard.io.bytes"),
                        data: io,
                        type: 'line',
                        smooth: true,
                    }, {
                        name: $I18N.t("dashboard.cache.bytes"),
                        data: cache,
                        type: 'line',
                        smooth: true
                    }]
                })
                this.basic[1].getChildren()[1].getChildren()[0].getChildren()[1].t18n({peer: this._format_bytes(Math.max(...io.map((ioVal, index) => ioVal + cache[index])))})
            }
        }
        {
            let io, cache;
            {
                io = {}
                cache = {}
                for (const val of daily_data) {
                    io[val._day] = val.hits
                    cache[val._day] = val.cache_hits
                }
                io = fillDates(io)
                cache = fillDates(cache)
                this._e_daily.hits.setOption({
                    color: [
                        app.getThemeVar("echarts-color-0"),
                        app.getThemeVar("echarts-color-1")
                    ],
                    xAxis: {
                        data: Object.keys(io)
                    },
                    legend: {
                        data: [$I18N.t("dashboard.io.hits"), $I18N.t("dashboard.cache.hits")],
                        textStyle: {
                            color: app.getThemeVar("color")
                        }
                    },
                    yAxis: {
                        max: Math.max(10, ...Object.values(io), ...Object.values(cache)),
                    },
                    series: [{
                        name: $I18N.t("dashboard.io.hits"),
                        data: Object.values(io),
                        type: 'line',
                        smooth: true,
                    }, {
                        name: $I18N.t("dashboard.cache.hits"),
                        data: Object.values(cache),
                        type: 'line',
                        smooth: true
                    }]
                })
                this.basic[1].getChildren()[2].getChildren()[0].getChildren()[1].t18n({peer: Math.max(...Object.keys(io).map(key => io[key] + cache[key]))})

                io = {}
                cache = {}
                for (const val of daily_data) {
                    io[val._day] = val.bytes
                    cache[val._day] = val.cache_bytes
                }
                io = fillDates(io)
                cache = fillDates(cache)
                this._e_daily.bytes.setOption({
                    color: [
                        app.getThemeVar("echarts-color-0"),
                        app.getThemeVar("echarts-color-1")
                    ],
                    xAxis: {
                        data: Object.keys(io)
                    },
                    legend: {
                        data: [$I18N.t("dashboard.io.bytes"), $I18N.t("dashboard.cache.bytes")],
                        textStyle: {
                            color: app.getThemeVar("color")
                        }
                    },
                    yAxis: {
                        max: Math.max(10, ...Object.values(io), ...Object.values(cache)),
                        axisLabel: {
                            formatter: (value) => {
                                return this._format_bytes(value)
                            }
                        }
                    },
                    series: [{
                        name: $I18N.t("dashboard.io.bytes"),
                        data: Object.values(io),
                        type: 'line',
                        smooth: true,
                    }, {
                        name: $I18N.t("dashboard.cache.bytes"),
                        data: Object.values(cache),
                        type: 'line',
                        smooth: true
                    }]
                })
                this.basic[1].getChildren()[3].getChildren()[0].getChildren()[1].t18n({peer: this._format_bytes(Math.max(...Object.keys(io).map(key => io[key] + cache[key])))})
            }
        }
    }
    drawQPS() {
        try {
            var option = {
                color: app.getThemeVar("main-color"),
                xAxis: {
                    data: Object.keys(this.qps)
                },
                series: [{ name: 'QPS', data: Object.values(this.qps) }]
            }
            var count = Object.values(this.qps).reduce((sum, i) => sum + i, 0)
            this._be_qps.setOption(option)
            this._pe_qps.setOption(option)
            this.basic[0].getChildren()[1].getChildren()[0].getChildren()[0].getChildren()[1].getChildren()[1].setText(count)
            this.pro[1].getChildren()[1].getChildren()[1].getChildren()[0].getChildren()[0].getChildren()[1].getChildren()[1].setText(count)
        } catch (e) {
        }
    }
    drawGEO() {
        if (this.pro_stats == null) return
        var data = []
        if (this.geo_type == "world") {
            var other = []
            var cn_data = 0
            this.pro_stats.addresses.forEach(e => {
                if (e.country == "CN") cn_data += e.value
                else other.push(e)
            })
            data = other.map(e => {
                var name = $Country.filter(c => c.code == e.country)[0] || {
                    code: '',
                    name: '',
                    name_en: ''
                }
                return {
                    country: name.code,
                    name: name.name_en,
                    display_name: name.name,
                    value: e.value
                }
            })
            if (cn_data != 0) {
                var name = $Country.filter(c => c.code == "CN")[0] || {
                    code: '',
                    name: '',
                    name_en: ''
                }
                data.push({
                    country: name.code,
                    name: name.name_en,
                    display_name: name.name,
                    value: cn_data
                })
            }
        } else {
            data = this.pro_stats.addresses.filter(e => e.country == "CN").map(e => {
                return {
                    country: e.country,
                    province: e.province,
                    name: e.province,
                    display_name: e.province,
                    value: e.value
                }
            })
        }
        data.sort((a, b) => b.value - a.value)
        this._e_geo.setOption({
            tooltip: {
                trigger: 'item',
            },
            visualMap: {
                min: 0,
                max: data.reduce((sum, i) => { return { value: Math.max(sum.value, i.value) } }, { value: 100 }).value,
                inRange: {
                    color: [app.getThemeVar("echarts-none-color"), app.getThemeVar("echarts-main-color")]
                },
                textStyle: {
                    color: app.getThemeVar("echarts-main-color")
                },
                orient: 'horizontal',
            },
            series: {
                name: "访问数量",
                type: 'map',
                map: this.geo_type,
                itemStyle: {
                    normal: {
                        areaColor: app.getThemeVar("echarts-area-color"),//'#F7F8FA',
                        borderColor: app.getThemeVar("echarts-border-color")//'#CCC'
                    },
                    emphasis: {
                        areaColor: app.getThemeVar("echarts-emphasis-color"),//'#ADD8E6',
                        borderColor: app.getThemeVar("dark-color")//'#ffffff'
                    }
                },
                data: data,
            }
        });
        this.pgeorank.setData(data.map(e => {
            return {
                name: this.geo_type == "world" ? "country." + e.country : "province." + e.province,
                value: e.value
            }
        }))
    }
    drawSystem() {
        var hits, bytes;
        hits = this.dashboard.hourly.reduce((sum, i) => sum + i.hits + i.cache_hits, 0)
        bytes = this.dashboard.hourly.reduce((sum, i) => sum + i.bytes + i.cache_bytes, 0)
        this.basic[0].getChildren()[0].getChildren()[0].getChildren()[0].getChildren()[0].getChildren()[1].setText(this._format_number_unit(hits))
        this.basic[0].getChildren()[0].getChildren()[0].getChildren()[0].getChildren()[1].getChildren()[1].setText(this._format_bytes(bytes))
        hits = this.dashboard.days.reduce((sum, i) => sum + i.hits + i.cache_hits, 0)
        bytes = this.dashboard.days.reduce((sum, i) => sum + i.bytes + i.cache_bytes, 0)
        this.basic[0].getChildren()[0].getChildren()[0].getChildren()[0].getChildren()[2].getChildren()[1].setText(this._format_number_unit(hits))
        this.basic[0].getChildren()[0].getChildren()[0].getChildren()[0].getChildren()[3].getChildren()[1].setText(this._format_bytes(bytes))

        this.basic[0].getChildren()[0].getChildren()[1].getChildren()[0].getChildren()[0].getChildren()[1].setText(this._format_number_unit(this.system.connections))
        this.basic[0].getChildren()[0].getChildren()[1].getChildren()[0].getChildren()[1].getChildren()[1].setText(this._format_bytes(this.system.memory))
        this.basic[0].getChildren()[0].getChildren()[1].getChildren()[0].getChildren()[2].getChildren()[1].getChildren()[0].setText(this._format_number_unit(this.system.cache.total))
        this.basic[0].getChildren()[0].getChildren()[1].getChildren()[0].getChildren()[2].getChildren()[1].getChildren()[1].setText(`(${this._format_bytes(this.system.cache.bytes)})`)
        this.basic[0].getChildren()[0].getChildren()[1].getChildren()[0].getChildren()[3].getChildren()[1].setText(this.system.cpu.toFixed(2) + "%")
    }
    drawGlobals() {
        var visits = (this.data_day_option <= 1 ? fillDateTimes(this.pro_stats.distinct_ip, this.data_day_option == 1 ? 7 : 1) : fillDates(this.pro_stats.distinct_ip))
        this._e_visits.setOption({
            color: app.getThemeVar("main-color"),
            xAxis: {
                data: Object.keys(visits)
            },
            series: [
                {
                    name: $I18N.t("dashboard.distincts"),
                    data: Object.values(visits),
                    type: 'line',
                    smooth: true,
                }
            ]
        })
        this.pro[1].getChildren()[1].getChildren()[0].getChildren()[0].getChildren()[1].t18n({ peer: Math.max(...Object.values(visits)) })
        var data = []
        for (const key in this.pro_stats.useragents) {
            data.push({
                label: key,
                value: this.pro_stats.useragents[key]
            })
        }
        data = data.sort((a, b) => b.value - a.value)
        this._e_ua.setOption({
            color: [
                app.getThemeVar("echarts-color-0"),
                app.getThemeVar("echarts-color-1"),
                app.getThemeVar("echarts-color-2"),
                app.getThemeVar("echarts-color-3"),
                app.getThemeVar("echarts-color-4")
            ],
            tooltip: {
                trigger: "item"
            },
            series: [
                {
                    type: "pie",
                    name: "客户端",
                    radius:[
                        "65%",
                        "80%"
                    ],
                    label:{
                        position:"inner",
                        fontSize:14,
                    },
                    minAngle:10,
                    minShowLabelAngle:1,
                    itemStyle:{
                        borderRadius:2,
                        borderWidth:2,
                        borderColor:app.getThemeVar("dark-color"),
                        borderJoin:"round"
                    },
                    data: data.slice(0, 5)
                }
            ]
        })
        this.setRank_UA();
    }
    setRank_UA() {
        var data = [];
        for (const key in this.pro_stats != null && this.pro_stats.useragents != null ? this.pro_stats.useragents : {}) {
            data.push({
                label: key,
                value: this.pro_stats.useragents[key]
            })
        }
        data = data.sort((a, b) => b.value - a.value)
        const empty = data.length == 0
        const colors = [
            app.getThemeVar("echarts-color-0"),
            app.getThemeVar("echarts-color-1"),
            app.getThemeVar("echarts-color-2"),
            app.getThemeVar("echarts-color-3"),
            app.getThemeVar("echarts-color-4")
        ]
        for (let i = data.length; i < 5; i++) {
            data.push({
                label: "-",
                value: 0
            })
        }
        this._r_ua.clear()
        var fd = data.slice(0, 5)
        for (var index in fd) {
            let value = fd[index]
            this._r_ua.append(
                app.createElement("div").class("flex", "flex-space-between", "flex-aligns-center").style("margin-top: 8px; margin-bottom: 8px").append(
                    app.createElement("div").class("flex", "flex-aligns-center").append(
                        app.createElement("div").class("rank-circle").style(`background-color: var(--echarts-color-${index}); `),
                        app.createElement("span").class("title-color").setText(value.label)
                    ),
                    app.createElement("span").style("font-weight: bold").setText(value.value)
                )
            )
        }
    }
    setStatus() {
        this.page[0].getChildren()[0].getChildren()[1].getChildren()[1].getChildren()[0].setI18N(this.status.key)
        this.page[0].getChildren()[0].getChildren()[1].getChildren()[1].getChildren()[1].style(`display: ${this.status.progress ? 'inline' : 'none'}`)
        if (this.status.progress) {
            var value_formatter = this.status.progress.desc == "files.downloading" ? (n) => this._format_bytes(n) : (n) => n
            this.page[0].getChildren()[0].getChildren()[1].getChildren()[1].getChildren()[1].getChildren()[1].setI18N(this.status.progress.desc)
            this.page[0].getChildren()[0].getChildren()[1].getChildren()[1].getChildren()[1].getChildren()[3].setI18N("tqdm", {
                value: value_formatter(this.status.progress.value),
                total: value_formatter(this.status.progress.total),
                item: value_formatter(this.status.progress.speed),
            })
        }
    }
    _format_time(n, sub = false) {
        if (n == null) return "-"
        let seconds = Number.parseInt(n)
        if (sub) seconds = Number.parseInt((new Date()).valueOf() / 1000.0 - seconds)
        return `${parseInt(seconds / 60 / 60 / 24).toString().padStart(2, '0')} 天 ${parseInt(seconds / 60 / 60 % 24).toString().padStart(2, '0')} 小时 ${parseInt(seconds / 60 % 60).toString().padStart(2, '0')} 分钟 ${parseInt(seconds % 60).toString().padStart(2, '0')} 秒`
    }
    connect() {
        return new Promise(async (resolve, reject) => {
            await this.init()
            resolve(this.page)
            setTimeout(() => window.dispatchEvent(new Event("resize")), 1)
        })
    }
    resize() {
    }
    disconnect() {
        this.clear()
        this.uptimeTimer?.block()
    }
}, "<i class='bx bx-bar-chart-alt-2'></i>")
/*app.$Menu.add("master", {}, "<i class='bx bx-trophy'></i>")
app.$Menu.add("master.rank", new class {

})*/
app.$Menu.add("config.storage", new class {
    constructor() {

    }
    connect() {
        return new Promise((resolve, reject) => {

        })
    }
    disconnect() {

    }
}, "<i class='bx bx-cog' ></i>")
if (dev) {
    app.$Menu.add("dev.web", new class {
        connect() {
            this.page = [
                app.createElement("div").class("panel").append(
                    app.createElement("p").class("title").setText(
                        "dev.web.console"
                    ),
                    logger
                )
            ]
            return new Promise(async (resolve, reject) => {
                resolve(this.page)
            })
        }
        disconnect() {

        }
    })
}
window.addEventListener("load", () => {
    app.$Router.handler()
})
app.$Menu.render();
window.addEventListener("resize", () => {
    app.$Menu.resize()
    console.log("resize")
})